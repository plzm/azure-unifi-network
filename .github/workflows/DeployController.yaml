---
  name: Deploy Controller

  on:
    workflow_dispatch:

  jobs:
    deploy-controller:
      name: Deploy Controller
      runs-on: ubuntu-latest
      steps:
        - name: Checkout repository
          uses: actions/checkout@v3

        - name: Set Azure CLI extensions to auto-install
          if: success()
          run: |
            $output = az config set extension.use_dynamic_install=yes_without_prompt | ConvertFrom-Json

            Write-Debug -Debug:$true -Message "$output"
          shell: pwsh

        - name: Azure login
          if: success()
          uses: azure/login@v1
          with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}
            enable-AzPSSession: true

        - name: Set Config File Paths to Environment
          if: success()
          shell: pwsh
          run: |
            $ErrorActionPreference = "Stop"

            . ./scripts/infra/Utility.ps1

            Set-EnvVar2 -VarName "AA_CONFIG_FILE_INFRA_CONSTANTS" -VarValue "./config/infra_constants.json"
            Set-EnvVar2 -VarName "AA_CONFIG_FILE_INFRA_MAIN" -VarValue ("./config/infra_main.json")
            Set-EnvVar2 -VarName "AA_CONFIG_FILE_INFRA_CONTROLLER" -VarValue ("./config/infra_controller.json")


        - name: Set Variables and write to Environment - Main
          if: success()
          shell: pwsh
          run: |
            $ErrorActionPreference = "Stop"

            . ./scripts/infra/Utility.ps1
            . ./scripts/infra/Network.ps1
            . ./scripts/infra/Variables.ps1

            $ConfigConstants = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_CONSTANTS }}"
            $ConfigMain = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_MAIN }}"
            $SubscriptionId = "${{ secrets.AZURE_SUBSCRIPTION_ID }}"

            Set-VariablesMain `
              -ConfigConstants $ConfigConstants `
              -ConfigMain $ConfigMain `
              -SubscriptionId $SubscriptionId


        - name: Set Variables and write to Environment - Controller
          if: success()
          shell: pwsh
          run: |
            $ErrorActionPreference = "Stop"

            . ./scripts/infra/Utility.ps1
            . ./scripts/infra/Network.ps1
            . ./scripts/infra/Variables.ps1

            $ConfigConstants = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_CONSTANTS }}"
            $ConfigMain = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_MAIN }}"
            $ConfigController = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_CONTROLLER }}"
            $SubscriptionId = "${{ secrets.AZURE_SUBSCRIPTION_ID }}"


            Set-VariablesController `
              -ConfigConstants $ConfigConstants `
              -ConfigMain $ConfigMain `
              -ConfigController $ConfigController `
              -SubscriptionId $SubscriptionId



        - name: Add NSG rule
          if: success()
          shell: pwsh
          run: |
            $ErrorActionPreference = "Stop"

            . ./scripts/infra/Utility.ps1
            . ./scripts/infra/Network.ps1

            $ConfigConstants = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_CONSTANTS }}"
            $ConfigMain = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_MAIN }}"
            $ConfigController = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_CONTROLLER }}"

            $nsgRule = $ConfigController.Network.NSG.Rules[0]

            $SubscriptionId = "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
            $nsgRuleName = $ConfigController.IdForNaming

            $output = Deploy-NSGRule `
              -SubscriptionID "$SubscriptionId" `
              -ResourceGroupName ${{ env.AA_RG_NAME_MAIN }} `
              -TemplateUri ($ConfigConstants.TemplateUriPrefix + "net.nsg.rule.json") `
              -NSGName ${{ env.AA_NSG_NAME }} `
              -NSGRuleName $nsgRuleName `
              -Description $nsgRule.Description `
              -Priority ($ConfigConstants.NsgPriorityBase + $ConfigController.Id) `
              -Direction $nsgRule.Direction `
              -Access $nsgRule.Access `
              -Protocol $nsgRule.Protocol `
              -SourceAddressPrefix $nsgRule.SourceAddressPrefix `
              -SourcePortRange $nsgRule.SourcePortRange `
              -DestinationAddressPrefix $nsgRule.DestinationAddressPrefix `
              -DestinationPortRanges $nsgRule.DestinationPortRanges

            Write-Debug -Debug:$debug -Message "$output"


        - name: Create Resource Group
          if: success()
          shell: pwsh
          run: |
            $ErrorActionPreference = "Stop"

            . ./scripts/infra/Utility.ps1

            $ConfigConstants = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_CONSTANTS }}"
            $ConfigMain = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_MAIN }}"
            $ConfigController = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_CONTROLLER }}"

            $SubscriptionId = "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
            $rgNameController = "${{ env.AA_RG_NAME_CONTROLLER }}"

            Write-Debug -Debug:$true -Message "Create RG $rgNameController"
            $output = az group create `
              --subscription "$SubscriptionId" `
              -l $ConfigController.Location `
              -n "$rgNameController" `
              --tags ${{ env.AA_TAGS_FOR_CLI }} `
              | ConvertFrom-Json


        - name: Deploy User Assigned Identity
          if: success()
          shell: pwsh
          run: |
            $ErrorActionPreference = "Stop"

            . ./scripts/infra/Utility.ps1
            . ./scripts/infra/Security.ps1

            $ConfigConstants = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_CONSTANTS }}"
            $ConfigMain = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_MAIN }}"
            $ConfigController = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_CONTROLLER }}"

            Write-Debug -Debug:$true -Message "Deploy UAI ${{ env.AA_UAI_NAME_CONTROLLER }}"
            $output = Deploy-UAI `
              -SubscriptionID "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
              -Location $ConfigMain.Location `
              -ResourceGroupName ${{ env.AA_RG_NAME_CONTROLLER }} `
              -TemplateUri ($ConfigConstants.TemplateUriPrefix + "identity.user-assigned-identity.json") `
              -TenantId "${{ secrets.AZURE_TENANT_ID }}" `
              -UAIName "${{ env.AA_UAI_NAME_CONTROLLER }}" `
              -Tags ${{ env.AA_TAGS_FOR_ARM }}

            Write-Debug -Debug:$true -Message "$output"

            Write-Debug -Debug:$true -Message "Sleep to allow UAI deploy to complete"
            Start-Sleep -s 60

            Write-Debug -Debug:$true -Message "Get UAI ${{ env.AA_UAI_NAME_CONTROLLER }}"
            $uai = "$(az identity show -g ${{ env.AA_RG_NAME_CONTROLLER }} -n ${{ env.AA_UAI_NAME_CONTROLLER }})" | ConvertFrom-Json

            Set-EnvVar2 -VarName "AA_UAI_CLIENT_ID_CONTROLLER" -VarValue $uai.clientId
            Set-EnvVar2 -VarName "AA_UAI_PRINCIPAL_ID_CONTROLLER" -VarValue $uai.principalId


        - name: Deploy Role Assignments
          if: success()
          shell: pwsh
          run: |
            $ErrorActionPreference = "Stop"

            . ./scripts/infra/Utility.ps1
            . ./scripts/infra/Security.ps1

            $ConfigConstants = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_CONSTANTS }}"
            $ConfigMain = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_MAIN }}"
            $ConfigController = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_CONTROLLER }}"


            Write-Debug -Debug:$true -Message "Deploy Role Assignment | UAI | Monitoring Metrics Publisher"
            $output = Deploy-RoleAssignmentSub `
              -Location $ConfigMain.Location `
              -TemplateUri ($ConfigConstants.TemplateUriPrefix + "authorization.role-assignment.sub.json") `
              -RoleDefinitionId $ConfigConstants.RoleDefinitionIdMonitoringMetricsPublisher `
              -PrincipalId "${{ env.AA_UAI_PRINCIPAL_ID_CONTROLLER }}"

            Write-Debug -Debug:$true -Message "$output"


        - name: Deploy Controller VM
          if: success()
          shell: pwsh
          run: |
            $ErrorActionPreference = "Stop"

            . ./scripts/infra/Utility.ps1
            . ./scripts/infra/Vm.ps1

            $ConfigConstants = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_CONSTANTS }}"
            $ConfigMain = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_MAIN }}"
            $ConfigController = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_CONTROLLER }}"

            $SubscriptionId = "${{ secrets.AZURE_SUBSCRIPTION_ID }}"

            $vmName = Get-ResourceName -ConfigConstants $ConfigConstants -ConfigMain $ConfigMain -Prefix $ConfigConstants.PrefixVm -Sequence $ConfigController.

            $output = Deploy-Vm `
              -SubscriptionID "$SubscriptionId" `
              -Location $ConfigController.Location `
              -ResourceGroupName ${{ env.AA_RG_NAME_CONTROLLER }} `
              -TemplateUri ($ConfigConstants.TemplateUriPrefix + "vm.linux.json") `
              -VmName $vmName `



        - name: Azure logout
          if: always()
          uses: azure/CLI@v1
          with:
            inlineScript: |
              az logout
              az cache purge
              az account clear
...