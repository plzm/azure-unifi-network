---
  name: Deploy Controller

  on:
    workflow_dispatch:

  jobs:
    deploy-controller:
      name: Deploy Controller
      runs-on: ubuntu-latest
      steps:
        - name: Checkout repository
          uses: actions/checkout@v3

        - name: Set Azure CLI extensions to auto-install
          if: success()
          run: |
            $output = az config set extension.use_dynamic_install=yes_without_prompt | ConvertFrom-Json

            Write-Debug -Debug:$true -Message "$output"
          shell: pwsh

        - name: Azure login
          if: success()
          uses: azure/login@v1
          with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}
            enable-AzPSSession: true

        - name: Set Config File Paths to Environment
          if: success()
          shell: pwsh
          run: |
            $ErrorActionPreference = "Stop"

            . ./scripts/infra/Utility.ps1

            Set-EnvVar2 -VarName "AA_CONFIG_FILE_INFRA_CONSTANTS" -VarValue "./config/infra_constants.json"
            Set-EnvVar2 -VarName "AA_CONFIG_FILE_INFRA_MAIN" -VarValue ("./config/infra_main.json")
            Set-EnvVar2 -VarName "AA_CONFIG_FILE_INFRA_CONTROLLER" -VarValue ("./config/infra_controller.json")


        - name: Set Variables and write to Environment - Main
          if: success()
          shell: pwsh
          run: |
            $ErrorActionPreference = "Stop"

            . ./scripts/infra/Utility.ps1
            . ./scripts/infra/Network.ps1
            . ./scripts/infra/Variables.ps1

            $ConfigConstants = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_CONSTANTS }}"
            $ConfigMain = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_MAIN }}"
            $SubscriptionId = "${{ secrets.AZURE_SUBSCRIPTION_ID }}"

            Set-VariablesMain `
              -ConfigConstants $ConfigConstants `
              -ConfigMain $ConfigMain `
              -SubscriptionId $SubscriptionId


        - name: Set Variables and write to Environment - Controller
          if: success()
          shell: pwsh
          run: |
            $ErrorActionPreference = "Stop"

            . ./scripts/infra/Utility.ps1
            . ./scripts/infra/Network.ps1
            . ./scripts/infra/Variables.ps1

            $ConfigConstants = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_CONSTANTS }}"
            $ConfigMain = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_MAIN }}"
            $ConfigController = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_CONTROLLER }}"
            $SubscriptionId = "${{ secrets.AZURE_SUBSCRIPTION_ID }}"

            Set-VariablesController `
              -ConfigConstants $ConfigConstants `
              -ConfigMain $ConfigMain `
              -ConfigController $ConfigController `
              -SubscriptionId $SubscriptionId


        #- name: Add NSG rule
        #  if: success()
        #  shell: pwsh
        #  run: |
        #    $ErrorActionPreference = "Stop"

        #    . ./scripts/infra/Utility.ps1
        #    . ./scripts/infra/Network.ps1

        #    $ConfigConstants = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_CONSTANTS }}"
        #    $ConfigMain = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_MAIN }}"
        #    $ConfigController = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_CONTROLLER }}"

        #    $nsgRule = $ConfigController.Network.NSG.Rules[0]

        #    $SubscriptionId = "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
        #    $nsgRuleName = $ConfigController.IdForNaming

        #    $output = Deploy-NSGRule `
        #      -SubscriptionID "$SubscriptionId" `
        #      -ResourceGroupName ${{ env.AA_RG_NAME_MAIN }} `
        #      -TemplateUri ($ConfigConstants.TemplateUriPrefix + "net.nsg.rule.json") `
        #      -NSGName ${{ env.AA_NSG_NAME }} `
        #      -NSGRuleName $nsgRuleName `
        #      -Description $nsgRule.Description `
        #      -Priority ($ConfigConstants.NsgPriorityBase + $ConfigController.Id) `
        #      -Direction $nsgRule.Direction `
        #      -Access $nsgRule.Access `
        #      -Protocol $nsgRule.Protocol `
        #      -SourceAddressPrefix $nsgRule.SourceAddressPrefix `
        #      -SourcePortRange $nsgRule.SourcePortRange `
        #      -DestinationAddressPrefix $nsgRule.DestinationAddressPrefix `
        #      -DestinationPortRanges $nsgRule.DestinationPortRanges

        #    Write-Debug -Debug:$debug -Message "$output"


        #- name: Create Resource Group
        #  if: success()
        #  shell: pwsh
        #  run: |
        #    $ErrorActionPreference = "Stop"

        #    . ./scripts/infra/Utility.ps1

        #    $ConfigConstants = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_CONSTANTS }}"
        #    $ConfigMain = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_MAIN }}"
        #    $ConfigController = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_CONTROLLER }}"

        #    $SubscriptionId = "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
        #    $rgNameController = "${{ env.AA_RG_NAME_CONTROLLER }}"

        #    Write-Debug -Debug:$true -Message "Create RG $rgNameController"
        #    $output = az group create `
        #      --subscription "$SubscriptionId" `
        #      -l $ConfigController.Location `
        #      -n "$rgNameController" `
        #      --tags ${{ env.AA_TAGS_FOR_CLI }} `
        #      | ConvertFrom-Json


        #- name: Deploy User Assigned Identity
        #  if: success()
        #  shell: pwsh
        #  run: |
        #    $ErrorActionPreference = "Stop"

        #    . ./scripts/infra/Utility.ps1
        #    . ./scripts/infra/Security.ps1

        #    $ConfigConstants = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_CONSTANTS }}"
        #    $ConfigMain = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_MAIN }}"
        #    $ConfigController = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_CONTROLLER }}"

        #    Write-Debug -Debug:$true -Message "Deploy UAI ${{ env.AA_UAI_NAME_CONTROLLER }}"
        #    $output = Deploy-UAI `
        #      -SubscriptionID "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
        #      -Location $ConfigMain.Location `
        #      -ResourceGroupName ${{ env.AA_RG_NAME_CONTROLLER }} `
        #      -TemplateUri ($ConfigConstants.TemplateUriPrefix + "identity.user-assigned-identity.json") `
        #      -TenantId "${{ secrets.AZURE_TENANT_ID }}" `
        #      -UAIName "${{ env.AA_UAI_NAME_CONTROLLER }}" `
        #      -Tags ${{ env.AA_TAGS_FOR_ARM }}

        #    Write-Debug -Debug:$true -Message "$output"

        #    Write-Debug -Debug:$true -Message "Sleep to allow UAI deploy to complete"
        #    Start-Sleep -s 60

        #    Write-Debug -Debug:$true -Message "Get UAI ${{ env.AA_UAI_NAME_CONTROLLER }}"
        #    $uai = "$(az identity show -g ${{ env.AA_RG_NAME_CONTROLLER }} -n ${{ env.AA_UAI_NAME_CONTROLLER }})" | ConvertFrom-Json

        #    Set-EnvVar2 -VarName "AA_UAI_CLIENT_ID_CONTROLLER" -VarValue $uai.clientId
        #    Set-EnvVar2 -VarName "AA_UAI_PRINCIPAL_ID_CONTROLLER" -VarValue $uai.principalId


        #- name: Deploy Role Assignments
        #  if: success()
        #  shell: pwsh
        #  run: |
        #    $ErrorActionPreference = "Stop"

        #    . ./scripts/infra/Utility.ps1
        #    . ./scripts/infra/Security.ps1

        #    $ConfigConstants = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_CONSTANTS }}"
        #    $ConfigMain = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_MAIN }}"
        #    $ConfigController = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_CONTROLLER }}"


        #    Write-Debug -Debug:$true -Message "Deploy Role Assignment | UAI | Monitoring Metrics Publisher"
        #    $output = Deploy-RoleAssignmentSub `
        #      -Location $ConfigMain.Location `
        #      -TemplateUri ($ConfigConstants.TemplateUriPrefix + "authorization.role-assignment.sub.json") `
        #      -RoleDefinitionId $ConfigConstants.RoleDefinitionIdMonitoringMetricsPublisher `
        #      -PrincipalId "${{ env.AA_UAI_PRINCIPAL_ID_CONTROLLER }}"

        #    Write-Debug -Debug:$true -Message "$output"


        - name: Open Key Vault access for GitHub runner
          if: success()
          shell: pwsh
          run: |
            $ErrorActionPreference = "Stop"

            . ./scripts/infra/Utility.ps1
            . ./scripts/infra/Network.ps1
            . ./scripts/infra/KeyVault.ps1

            $ConfigConstants = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_CONSTANTS }}"
            $ConfigMain = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_MAIN }}"
            $ConfigController = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_CONTROLLER }}"

            Write-Debug -Debug:$true -Message "Enable Key Vault public network access with default action Deny since we will explicitly add runner IP"
            Set-KeyVaultNetworkSettings `
              -SubscriptionId "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
              -ResourceGroupName ${{ env.AA_RG_NAME_MAIN }} `
              -KeyVaultName "${{ env.AA_KEYVAULT_NAME_MAIN }}" `
              -PublicNetworkAccess "Enabled" `
              -DefaultAction "Deny"
  
            Write-Debug -Debug:$true -Message "Add runner IP to KV network rules"
            New-KeyVaultNetworkRuleForIpAddressOrRange `
              -SubscriptionId "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
              -ResourceGroupName ${{ env.AA_RG_NAME_MAIN }} `
              -KeyVaultName "${{ env.AA_KEYVAULT_NAME_MAIN }}" `
              -IpAddressOrRange ${{ env.AA_GITHUB_RUNNER_PUBLIC_IP }}


        - name: Create SSH Key and write to Key Vault
          if: success()
          shell: pwsh
          run: |
            $ErrorActionPreference = "Stop"

            . ./scripts/infra/Utility.ps1
            . ./scripts/infra/Network.ps1
            . ./scripts/infra/KeyVault.ps1

            $ConfigConstants = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_CONSTANTS }}"
            $ConfigMain = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_MAIN }}"
            $ConfigController = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_CONTROLLER }}"


            # Key filenames
            $filePathPrivate = ("./" + "${{ env.AA_SSH_KEY_NAME_CONTROLLER }}")
            $filePathPublic = ("./" + "${{ env.AA_SSH_KEY_NAME_CONTROLLER }}" + ".pub")

            # Delete key files if already exist
            if (Test-Path $filePathPrivate) { Remove-Item -Path $filePathPrivate -Force }
            if (Test-Path $filePathPublic) { Remove-Item -Path $filePathPublic -Force }

            # Create SSH key pair
            ssh-keygen -v -q -m $ConfigConstants.SshKeyFormat -f "${{ env.AA_SSH_KEY_NAME_CONTROLLER }}" -t $ConfigConstants.SshKeyAlgorithm -b $ConfigConstants.SshKeySize -C $ConfigController.Vm.AdminUserName -N """"

            $publicKey = Get-Content -Path $filePathPublic -Raw
            $privateKey = Get-Content -Path $filePathPrivate -Raw

            Write-Debug -Debug:$true -Message "Public key: $publicKey"
            Write-Debug -Debug:$true -Message "Private key: $privateKey"

            # Delete key files
            if (Test-Path $filePathPrivate) { Remove-Item -Path $filePathPrivate -Force }
            if (Test-Path $filePathPublic) { Remove-Item -Path $filePathPublic -Force }


            # Write admin username, SSH key name, public SSH key, and private SSH key to Key Vault and to Env Vars

            # Admin username
            Set-KeyVaultSecret `
              -SubscriptionId "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
              -KeyVaultName "${{ env.AA_KEYVAULT_NAME_MAIN }}" `
              -SecretName "${{ env.AA_VM_NAME_CONTROLLER }}-ssh-admin-username" `
              -SecretValue $ConfigController.Vm.AdminUserName

            # SSH key name
            Set-KeyVaultSecret `
              -SubscriptionId "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
              -KeyVaultName "${{ env.AA_KEYVAULT_NAME_MAIN }}" `
              -SecretName "${{ env.AA_VM_NAME_CONTROLLER }}-ssh-keyname" `
              -SecretValue ${{ env.AA_SSH_KEY_NAME_CONTROLLER }}

            # SSH public key
            Set-KeyVaultSecret `
              -SubscriptionId "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
              -KeyVaultName "${{ env.AA_KEYVAULT_NAME_MAIN }}" `
              -SecretName "${{ env.AA_VM_NAME_CONTROLLER }}-ssh-public-key" `
              -SecretValue $publicKey

            # SSH private key
            Set-KeyVaultSecret `
              -SubscriptionId "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
              -KeyVaultName "${{ env.AA_KEYVAULT_NAME_MAIN }}" `
              -SecretName "${{ env.AA_VM_NAME_CONTROLLER }}-ssh-private-key" `
              -SecretValue $privateKey

            Set-EnvVar2 -VarName "AA_VM_SSH_PUBLIC_KEY" -VarValue "$publicKey"
            #Set-EnvVar2 -VarName "AA_VM_SSH_PRIVATE_KEY" -VarValue ("""" + $privateKey + """")


        - name: Close Key Vault access from GitHub runner
          if: always()
          shell: pwsh
          run: |
            $ErrorActionPreference = "Stop"

            . ./scripts/infra/Utility.ps1
            . ./scripts/infra/Network.ps1
            . ./scripts/infra/KeyVault.ps1

            $ConfigConstants = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_CONSTANTS }}"
            $ConfigMain = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_MAIN }}"
            $ConfigController = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_CONTROLLER }}"

            Write-Debug -Debug:$true -Message "Remove runner IP from KV network rules"
            Remove-KeyVaultNetworkRuleForIpAddressOrRange `
              -SubscriptionId "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
              -ResourceGroupName ${{ env.AA_RG_NAME_MAIN }} `
              -KeyVaultName "${{ env.AA_KEYVAULT_NAME_MAIN }}" `
              -IpAddressOrRange ${{ env.AA_GITHUB_RUNNER_PUBLIC_IP }}
  
            #Write-Debug -Debug:$true -Message "Disable Key Vault public network access with default action Deny"
            #Set-KeyVaultNetworkSettings `
            #  -SubscriptionId "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
            #  -ResourceGroupName ${{ env.AA_RG_NAME_MAIN }} `
            #  -KeyVaultName "${{ env.AA_KEYVAULT_NAME_MAIN }}" `
            #  -PublicNetworkAccess "Disabled" `
            #  -DefaultAction "Deny"


        - name: Deploy Controller VM and PIP and NIC
          if: success()
          shell: pwsh
          run: |
            $ErrorActionPreference = "Stop"

            . ./scripts/infra/Utility.ps1
            . ./scripts/infra/Network.ps1
            . ./scripts/infra/Observability.ps1
            . ./scripts/infra/Vm.ps1

            $ConfigConstants = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_CONSTANTS }}"
            $ConfigMain = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_MAIN }}"
            $ConfigController = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_CONTROLLER }}"
            $SubscriptionId = "${{ secrets.AZURE_SUBSCRIPTION_ID }}"

            $osDiskName = Get-ResourceName -ConfigConstants $ConfigConstants -ConfigMain $ConfigMain -Prefix $ConfigConstants.PrefixOsDisk -Sequence $ConfigController.IdForNaming

            # Deploy PIP
            $output = Deploy-Pip `
              -SubscriptionID "$SubscriptionId" `
              -Location $ConfigController.Location `
              -ResourceGroupName ${{ env.AA_RG_NAME_CONTROLLER }} `
              -TemplateUri ($ConfigConstants.TemplateUriPrefix + "net.public-ip.json") `
              -PublicIpAddressName ${{ env.AA_VM_PIP_NAME_CONTROLLER }} `
              -PublicIpAddressType $ConfigController.Network.PublicIp.Type `
              -PublicIpAddressSku $ConfigController.Network.PublicIp.Sku `
              -HostName ${{ env.AA_VM_HOSTNAME_CONTROLLER}} `
              -Tags ${{ env.AA_TAGS_FOR_ARM }}

            $output = Deploy-DiagnosticsSetting `
              -SubscriptionID "$SubscriptionId" `
              -ResourceGroupName ${{ env.AA_RG_NAME_CONTROLLER }} `
              -TemplateUri ($ConfigConstants.TemplateUriPrefix + "diagnostic-settings.json") `
              -ResourceId ${{ env.AA_VM_PIP_RESOURCE_ID_CONTROLLER }} `
              -DiagnosticsSettingName ("diag-" + "${{ env.AA_VM_PIP_NAME_CONTROLLER }}") `
              -LogAnalyticsWorkspaceResourceId ${{ env.AA_LAW_RESOURCE_ID_MAIN }} `
              -SendLogs $true `
              -SendMetrics $true

            Write-Debug -Debug:$debug -Message "$output"


            # Deploy NIC
            $output = Deploy-Nic `
              -SubscriptionID "$SubscriptionId" `
              -Location $ConfigController.Location `
              -ResourceGroupName ${{ env.AA_RG_NAME_CONTROLLER }} `
              -TemplateUri ($ConfigConstants.TemplateUriPrefix + "net.network-interface.json") `
              -NicName ${{ env.AA_VM_NIC_NAME_CONTROLLER }} `
              -SubnetResourceId ${{ env.AA_SUBNET_RESOURCE_ID_MAIN}} `
              -EnableAcceleratedNetworking $ConfigController.Network.Nic.EnableAcceleratedNetworking `
              -PublicIpResourceId ${{ env.AA_VM_PIP_RESOURCE_ID_CONTROLLER}} `
              -IpConfigName $ConfigController.Network.Nic.IpConfigurationName `
              -Tags ${{ env.AA_TAGS_FOR_ARM }}

            $output = Deploy-DiagnosticsSetting `
              -SubscriptionID "$SubscriptionId" `
              -ResourceGroupName ${{ env.AA_RG_NAME_CONTROLLER }} `
              -TemplateUri ($ConfigConstants.TemplateUriPrefix + "diagnostic-settings.json") `
              -ResourceId ${{ env.AA_VM_NIC_RESOURCE_ID_CONTROLLER }} `
              -DiagnosticsSettingName ("diag-" + "${{ env.AA_VM_NIC_NAME_CONTROLLER }}") `
              -LogAnalyticsWorkspaceResourceId ${{ env.AA_LAW_RESOURCE_ID_MAIN }} `
              -SendLogs $false `
              -SendMetrics $true

            Write-Debug -Debug:$debug -Message "$output"


            # Deploy VM

            $output = Deploy-Vm `
              -SubscriptionID "$SubscriptionId" `
              -Location $ConfigController.Location `
              -ResourceGroupName ${{ env.AA_RG_NAME_CONTROLLER }} `
              -TemplateUri ($ConfigConstants.TemplateUriPrefix + "vm.linux.json") `
              -VmName ${{ env.AA_VM_NAME_CONTROLLER }} `
              -AssignSystemIdentity $false `
              -UaiResourceId "${{ env.AA_UAI_RESOURCE_ID_CONTROLLER }}" `
              -VmSize $ConfigController.Vm.Size `
              -VmPublisher $ConfigController.Vm.Publisher `
              -VmOffer $ConfigController.Vm.Offer `
              -VmSku $ConfigController.Vm.Sku `
              -ProvisionVmAgent $true `
              -VmAdminUsername $ConfigController.Vm.AdminUserName `
              -VmAdminSshPublicKey "${{ env.AA_VM_SSH_PUBLIC_KEY }}" `
              -VmTimeZone "UTC" `
              -OsDiskName $osDiskName `
              -OsDiskStorageType $ConfigController.Vm.OsDisk.Type `
              -OsDiskSizeInGB $ConfigController.Vm.OsDisk.SizeInGB `
              -VmAutoShutdownTime "9999" `
              -NetworkInterfaceResourceId "${{ env.AA_VM_NIC_RESOURCE_ID_CONTROLLER }}" `
              -EnableBootDiagnostics $true `
              -BootDiagnosticsStorageAccountName "${{ env.AA_STORAGE_ACCOUNT_NAME_MAIN }}" `
              -Tags ${{ env.AA_TAGS_FOR_ARM }}

            Write-Debug -Debug:$true -Message "$output"

            $output = Deploy-DiagnosticsSetting `
              -SubscriptionID "$SubscriptionId" `
              -ResourceGroupName ${{ env.AA_RG_NAME_CONTROLLER }} `
              -TemplateUri ($ConfigConstants.TemplateUriPrefix + "diagnostic-settings.json") `
              -ResourceId ${{ env.AA_VM_RESOURCE_ID_CONTROLLER }} `
              -DiagnosticsSettingName ("diag-" + "${{ env.AA_VM_NAME_CONTROLLER }}") `
              -LogAnalyticsWorkspaceResourceId ${{ env.AA_LAW_RESOURCE_ID_MAIN }} `
              -SendLogs $true `
              -SendMetrics $true

            Write-Debug -Debug:$debug -Message "$output"


        - name: Azure logout
          if: always()
          uses: azure/CLI@v1
          with:
            inlineScript: |
              az logout
              az cache purge
              az account clear
...