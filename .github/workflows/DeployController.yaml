---
name: Deploy Controller

on:
  workflow_dispatch:

jobs:
  deploy-controller:
    name: Deploy Controller
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set Azure CLI extensions to auto-install
        if: success()
        run: |
          $output = az config set extension.use_dynamic_install=yes_without_prompt | ConvertFrom-Json

          Write-Debug -Debug:$true -Message "$output"
        shell: pwsh

      - name: Azure login
        if: success()
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      - name: Download and import plzm.Azure module
        if: success()
        shell: pwsh
        run: |
          $urlRoot = "${{ vars.URL_ROOT_MODULE_PLZM_AZURE }}"
          . ./scripts/Module.ps1
          Get-PlzmAzureModule -UrlRoot "$urlRoot"

      - name: Set Config File Paths to Environment
        if: success()
        shell: pwsh
        run: |
          Import-Module "${{ env.AX_MODULE_PATH_PLZM_AZURE }}" -Force

          plzm.Azure\Set-EnvVar2 -VarName "AX_CONFIG_FILE_INFRA_CONSTANTS" -VarValue "./config/infra_constants.json"
          plzm.Azure\Set-EnvVar2 -VarName "AX_CONFIG_FILE_INFRA_MAIN" -VarValue ("./config/infra_main.json")
          plzm.Azure\Set-EnvVar2 -VarName "AX_CONFIG_FILE_INFRA_CONTROLLER" -VarValue ("./config/infra_controller.json")
          plzm.Azure\Set-EnvVar2 -VarName "AX_CONFIG_FILE_INFRA_CONTROLLER_SSH" -VarValue ("./config/infra_controller_ssh.json")

      - name: Set Variables
        if: success()
        shell: pwsh
        run: |
          Import-Module "${{ env.AX_MODULE_PATH_PLZM_AZURE }}" -Force

          . ./scripts/Variables.ps1

          $ConfigConstants = plzm.Azure\Get-ConfigFromFile -ConfigFilePath "${{ env.AX_CONFIG_FILE_INFRA_CONSTANTS }}"
          $ConfigMain = plzm.Azure\Get-ConfigFromFile -ConfigFilePath "${{ env.AX_CONFIG_FILE_INFRA_MAIN }}"
          $ConfigController = plzm.Azure\Get-ConfigFromFile -ConfigFilePath "${{ env.AX_CONFIG_FILE_INFRA_CONTROLLER }}"
          $ConfigControllerSsh = plzm.Azure\Get-ConfigFromFile -ConfigFilePath "${{ env.AX_CONFIG_FILE_INFRA_CONTROLLER_SSH }}"

          $SubscriptionId = "${{ secrets.AZURE_SUBSCRIPTION_ID }}"

          Set-VariablesMain `
            -ConfigConstants $ConfigConstants `
            -ConfigMain $ConfigMain `
            -SubscriptionId $SubscriptionId

          Set-VariablesController `
            -ConfigConstants $ConfigConstants `
            -ConfigMain $ConfigMain `
            -ConfigController $ConfigController `
            -ConfigControllerSsh $ConfigControllerSsh `
            -SubscriptionId $SubscriptionId

      - name: Create Resource Group
        if: success()
        shell: pwsh
        run: |
          Import-Module "${{ env.AX_MODULE_PATH_PLZM_AZURE }}" -Force

          $ConfigConstants = plzm.Azure\Get-ConfigFromFile -ConfigFilePath "${{ env.AX_CONFIG_FILE_INFRA_CONSTANTS }}"
          $ConfigMain = plzm.Azure\Get-ConfigFromFile -ConfigFilePath "${{ env.AX_CONFIG_FILE_INFRA_MAIN }}"
          $ConfigController = plzm.Azure\Get-ConfigFromFile -ConfigFilePath "${{ env.AX_CONFIG_FILE_INFRA_CONTROLLER }}"

          $SubscriptionId = "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          $rgNameController = "${{ env.AX_RG_NAME_CONTROLLER }}"

          Write-Debug -Debug:$true -Message "Create RG $rgNameController"
          $output = az group create `
            --subscription "$SubscriptionId" `
            -l $ConfigController.Location `
            -n "$rgNameController" `
            | ConvertFrom-Json

      - name: Deploy User Assigned Identity
        if: success()
        shell: pwsh
        run: |
          Import-Module "${{ env.AX_MODULE_PATH_PLZM_AZURE }}" -Force

          $ConfigConstants = plzm.Azure\Get-ConfigFromFile -ConfigFilePath "${{ env.AX_CONFIG_FILE_INFRA_CONSTANTS }}"
          $ConfigMain = plzm.Azure\Get-ConfigFromFile -ConfigFilePath "${{ env.AX_CONFIG_FILE_INFRA_MAIN }}"
          $ConfigController = plzm.Azure\Get-ConfigFromFile -ConfigFilePath "${{ env.AX_CONFIG_FILE_INFRA_CONTROLLER }}"

          $output = plzm.Azure\Deploy-UserAssignedIdentity `
            -SubscriptionID "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
            -Location $ConfigMain.Location `
            -ResourceGroupName ${{ env.AX_RG_NAME_CONTROLLER }} `
            -TemplateUri ($ConfigConstants.TemplateUriPrefix + "identity.user-assigned-identity.json") `
            -TenantId "${{ secrets.AZURE_TENANT_ID }}" `
            -UAIName "${{ env.AX_UAI_NAME_CONTROLLER }}"

          Write-Debug -Debug:$true -Message "$output"

          Write-Debug -Debug:$true -Message "Sleep to allow UAI deploy to complete"
          Start-Sleep -s 60

          Write-Debug -Debug:$true -Message "Get UAI ${{ env.AX_UAI_NAME_CONTROLLER }}"
          $uai = "$(az identity show -g ${{ env.AX_RG_NAME_CONTROLLER }} -n ${{ env.AX_UAI_NAME_CONTROLLER }})" | ConvertFrom-Json

          plzm.Azure\Set-EnvVar2 -VarName "AX_UAI_CLIENT_ID_CONTROLLER" -VarValue $uai.clientId
          plzm.Azure\Set-EnvVar2 -VarName "AX_UAI_PRINCIPAL_ID_CONTROLLER" -VarValue $uai.principalId

      - name: Deploy Role Assignments
        if: success()
        shell: pwsh
        run: |
          Import-Module "${{ env.AX_MODULE_PATH_PLZM_AZURE }}" -Force

          $ConfigConstants = plzm.Azure\Get-ConfigFromFile -ConfigFilePath "${{ env.AX_CONFIG_FILE_INFRA_CONSTANTS }}"
          $ConfigMain = plzm.Azure\Get-ConfigFromFile -ConfigFilePath "${{ env.AX_CONFIG_FILE_INFRA_MAIN }}"
          $ConfigController = plzm.Azure\Get-ConfigFromFile -ConfigFilePath "${{ env.AX_CONFIG_FILE_INFRA_CONTROLLER }}"

          $output = plzm.Azure\Deploy-RoleAssignmentSub `
            -Location $ConfigMain.Location `
            -TemplateUri ($ConfigConstants.TemplateUriPrefix + "authorization.role-assignment.sub.json") `
            -RoleDefinitionId $ConfigConstants.RoleDefinitionIdMonitoringMetricsPublisher `
            -PrincipalId "${{ env.AX_UAI_PRINCIPAL_ID_CONTROLLER }}"

          Write-Debug -Debug:$true -Message "$output"


      - name: Open Key Vault access for GitHub runner
        if: success()
        shell: pwsh
        run: |
          Import-Module "${{ env.AX_MODULE_PATH_PLZM_AZURE }}" -Force

          $ConfigConstants = plzm.Azure\Get-ConfigFromFile -ConfigFilePath "${{ env.AX_CONFIG_FILE_INFRA_CONSTANTS }}"
          $ConfigMain = plzm.Azure\Get-ConfigFromFile -ConfigFilePath "${{ env.AX_CONFIG_FILE_INFRA_MAIN }}"
          $ConfigController = plzm.Azure\Get-ConfigFromFile -ConfigFilePath "${{ env.AX_CONFIG_FILE_INFRA_CONTROLLER }}"

          #Write-Debug -Debug:$true -Message "Enable Key Vault public network access with default action Deny since we will explicitly add runner IP"
          #plzm.Azure\Set-KeyVaultNetworkSettings `
          #  -SubscriptionId "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
          #  -ResourceGroupName ${{ env.AX_RG_NAME_MAIN }} `
          #  -KeyVaultName "${{ env.AX_KEYVAULT_NAME_MAIN }}" `
          #  -PublicNetworkAccess "Enabled" `
          #  -DefaultAction "Deny"

          Write-Debug -Debug:$true -Message "Add runner IP to KV network rules"
          plzm.Azure\New-KeyVaultNetworkRuleForIpAddressOrRange `
            -SubscriptionId "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
            -ResourceGroupName ${{ env.AX_RG_NAME_MAIN }} `
            -KeyVaultName "${{ env.AX_KEYVAULT_NAME_MAIN }}" `
            -IpAddressOrRange ${{ env.AX_GITHUB_RUNNER_PUBLIC_IP }}

      - name: Create SSH folder
        if: success()
        shell: bash
        run: |
          if [[ ! -d "${{ env.AX_VM_SSH_PATH }}" ]]
          then
            echo "Create ${{ env.AX_VM_SSH_PATH }} directory"
            mkdir -p ${{ env.AX_VM_SSH_PATH }}
          fi

          sudo chmod 700 ${{ env.AX_VM_SSH_PATH }}

          ls -la ~
          ls -la ${{ env.AX_VM_SSH_PATH }}

      - name: Prepare SSH Keys to/from KV and to .ssh folder
        if: success()
        shell: pwsh
        run: |
          Import-Module "${{ env.AX_MODULE_PATH_PLZM_AZURE }}" -Force

          $ConfigConstants = plzm.Azure\Get-ConfigFromFile -ConfigFilePath "${{ env.AX_CONFIG_FILE_INFRA_CONSTANTS }}"
          $ConfigMain = plzm.Azure\Get-ConfigFromFile -ConfigFilePath "${{ env.AX_CONFIG_FILE_INFRA_MAIN }}"
          $ConfigController = plzm.Azure\Get-ConfigFromFile -ConfigFilePath "${{ env.AX_CONFIG_FILE_INFRA_CONTROLLER }}"

          # Secret names
          $suffixSshAdminUserName = $ConfigConstants.SuffixSecretNameSshAdminUserName
          $suffixSshKeyName = $ConfigConstants.SuffixSecretNameSshKeyName
          $suffixSshPublicKey = $ConfigConstants.SuffixSecretNameSshPublicKey
          $suffixSshPrivateKey = $ConfigConstants.SuffixSecretNameSshPrivateKey

          $secretNameAdminUserName = "${{ env.AX_VM_NAME_CONTROLLER }}" + "$suffixSshAdminUsername"
          $secretNameSshKeyName = "${{ env.AX_VM_NAME_CONTROLLER }}" + "$suffixSshKeyName"
          $secretNameSshPublicKey = "${{ env.AX_VM_NAME_CONTROLLER }}" + "$suffixSshPublicKey"
          $secretNameSshPrivateKey = "${{ env.AX_VM_NAME_CONTROLLER }}" + "$suffixSshPrivateKey"

          $secretValueAdminUserName = ""
          $secretValueSshKeyName = ""
          $secretValueSshPublicKey = ""
          $secretValueSshPrivateKey = ""


          # Key filenames
          $filePathPrivate = Join-Path -Path "${{ env.AX_VM_SSH_PATH }}" -ChildPath "${{ env.AX_SSH_KEY_NAME_CONTROLLER }}"
          $filePathPublic = Join-Path -Path "${{ env.AX_VM_SSH_PATH }}" -ChildPath ("${{ env.AX_SSH_KEY_NAME_CONTROLLER }}" + $ConfigConstants.SshPublicKeyFileExtension)

          Write-Debug -Debug:$true -Message "filePathPrivate: $filePathPrivate"
          Write-Debug -Debug:$true -Message "filePathPublic: $filePathPublic"

          # Delete key files if already exist - should not exist on a GitHub-hosted GHA runner, but just to make sure
          if (Test-Path $filePathPrivate) { Remove-Item -Path $filePathPrivate -Force }
          if (Test-Path $filePathPublic) { Remove-Item -Path $filePathPublic -Force }


          # Check if the Controller VM already exists (meaning, this is a re-deploy run)
          # If so, we also check if the SSH secrets already exist in the Key Vault
          # If VM exists and SSH secrets exist, we will use the existing SSH key values from KV secrets

          $vmExists = plzm.Azure\Test-ResourceExists `
            -SubscriptionId "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
            -ResourceGroupName ${{ env.AX_RG_NAME_CONTROLLER }} `
            -ResourceType "Microsoft.Compute/virtualMachines" `
            -ResourceName "${{ env.AX_VM_NAME_CONTROLLER }}"

          Write-Debug -Debug:$true -Message "vmExists: $vmExists"

          if ($vmExists)
          {
            # Get the values of the SSH secrets from the Key Vault

            $secretValueAdminUserName = plzm.Azure\Get-KeyVaultSecret `
              -SubscriptionId "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
              -KeyVaultName "${{ env.AX_KEYVAULT_NAME_MAIN }}" `
              -SecretName "$secretNameAdminUserName"

            $secretValueSshKeyName = plzm.Azure\Get-KeyVaultSecret `
              -SubscriptionId "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
              -KeyVaultName "${{ env.AX_KEYVAULT_NAME_MAIN }}" `
              -SecretName "$secretNameSshKeyName"

            $secretValueSshPublicKey = plzm.Azure\Get-KeyVaultSecret `
              -SubscriptionId "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
              -KeyVaultName "${{ env.AX_KEYVAULT_NAME_MAIN }}" `
              -SecretName "$secretNameSshPublicKey"

            $secretValueSshPrivateKey = plzm.Azure\Get-KeyVaultSecret `
              -SubscriptionId "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
              -KeyVaultName "${{ env.AX_KEYVAULT_NAME_MAIN }}" `
              -SecretName "$secretNameSshPrivateKey"
          }

          $secretsExist = ($secretValueAdminUserName -and $secretValueSshKeyName -and $secretValueSshPublicKey -and $secretValueSshPrivateKey)

          if ($secretsExist)
          {
            Write-Debug -Debug:$true -Message "Secrets found in Key Vault. Writing to files."

            Set-Content -Path "$filePathPublic" -Value $secretValueSshPublicKey
            Set-Content -Path "$filePathPrivate" -Value $secretValueSshPrivateKey
          }
          else
          {
            Write-Debug -Debug:$true -Message "Secrets NOT found in Key Vault!"

            $secretValueAdminUserName = "${{ env.AX_VM_ADMIN_USERNAME }}"
            $secretValueSshKeyName = "${{ env.AX_SSH_KEY_NAME_CONTROLLER }}"

            # Create SSH key pair
            Write-Debug -Debug:$true -Message "Run ssh-keygen"
            $cmd = `
              "ssh-keygen -v -q " + `
              " -m " + $ConfigConstants.SshKeyFormat + `
              " -f $filePathPrivate" + `
              " -t " + $ConfigConstants.SshKeyAlgorithm + `
              " -b " + $ConfigConstants.SshKeySize + `
              " -C " + "${{ env.AX_VM_ADMIN_USERNAME }}" + `
              " -N ''"

            Write-Debug -Debug:$true -Message "cmd ==="
            Write-Debug -Debug:$true -Message "$cmd"
            Invoke-Expression -Command $cmd

            # Get generated key values
            $secretValueSshPublicKey = Get-Content -Path "$filePathPublic" -Raw
            $secretValueSshPrivateKey = Get-Content -Path "$filePathPrivate" -Raw


            # Write admin username, SSH key name, public SSH key, and private SSH key to Key Vault
            # Admin username
            plzm.Azure\Set-KeyVaultSecret `
              -SubscriptionId "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
              -KeyVaultName "${{ env.AX_KEYVAULT_NAME_MAIN }}" `
              -SecretName "$secretNameAdminUserName" `
              -SecretValue "$secretValueAdminUserName"

            # SSH key name
            plzm.Azure\Set-KeyVaultSecret `
              -SubscriptionId "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
              -KeyVaultName "${{ env.AX_KEYVAULT_NAME_MAIN }}" `
              -SecretName "$secretNameSshKeyName" `
              -SecretValue "$secretValueSshKeyName"

            # SSH public key
            plzm.Azure\Set-KeyVaultSecret `
              -SubscriptionId "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
              -KeyVaultName "${{ env.AX_KEYVAULT_NAME_MAIN }}" `
              -SecretName "$secretNameSshPublicKey" `
              -SecretValue $secretValueSshPublicKey

            # SSH private key
            plzm.Azure\Set-KeyVaultSecret `
              -SubscriptionId "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
              -KeyVaultName "${{ env.AX_KEYVAULT_NAME_MAIN }}" `
              -SecretName "$secretNameSshPrivateKey" `
              -SecretValue $secretValueSshPrivateKey
          }

          Write-Debug -Debug:$true -Message "Public key: $secretValueSshPublicKey"

          # Write key filenames and values to env vars for later use
          plzm.Azure\Set-EnvVar2 -VarName "AX_VM_SSH_PUBLIC_KEY_FILE_PATH" -VarValue "$filePathPublic"
          plzm.Azure\Set-EnvVar2 -VarName "AX_VM_SSH_PRIVATE_KEY_FILE_PATH" -VarValue "$filePathPrivate"
          plzm.Azure\Set-EnvVar2 -VarName "AX_VM_SSH_PUBLIC_KEY" -VarValue "$secretValueSshPublicKey"
          #plzm.Azure\Set-EnvVar2 -VarName "AX_VM_SSH_PRIVATE_KEY" -VarValue ("""" + $secretValueSshPrivateKey + """")

      - name: Set SSH folder and file permission, and list files in SSH folder
        if: success()
        shell: bash
        run: |
          sudo chmod 700 ${{ env.AX_VM_SSH_PATH }}
          sudo chmod 600 ${{ env.AX_VM_SSH_PRIVATE_KEY_FILE_PATH }}*
          sudo chmod 644 ${{ env.AX_VM_SSH_PUBLIC_KEY_FILE_PATH }}

          ls -la ~
          ls -la ${{ env.AX_VM_SSH_PATH }}

      - name: Close Key Vault access from GitHub runner
        if: always()
        shell: pwsh
        run: |
          Import-Module "${{ env.AX_MODULE_PATH_PLZM_AZURE }}" -Force

          $ConfigConstants = plzm.Azure\Get-ConfigFromFile -ConfigFilePath "${{ env.AX_CONFIG_FILE_INFRA_CONSTANTS }}"
          $ConfigMain = plzm.Azure\Get-ConfigFromFile -ConfigFilePath "${{ env.AX_CONFIG_FILE_INFRA_MAIN }}"
          $ConfigController = plzm.Azure\Get-ConfigFromFile -ConfigFilePath "${{ env.AX_CONFIG_FILE_INFRA_CONTROLLER }}"

          Write-Debug -Debug:$true -Message "Remove runner IP from KV network rules"
          plzm.Azure\Remove-KeyVaultNetworkRuleForIpAddressOrRange `
            -SubscriptionId "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
            -ResourceGroupName ${{ env.AX_RG_NAME_MAIN }} `
            -KeyVaultName "${{ env.AX_KEYVAULT_NAME_MAIN }}" `
            -IpAddressOrRange ${{ env.AX_GITHUB_RUNNER_PUBLIC_IP }}

          #Write-Debug -Debug:$true -Message "Disable Key Vault public network access with default action Deny"
          #plzm.Azure\Set-KeyVaultNetworkSettings `
          #  -SubscriptionId "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
          #  -ResourceGroupName ${{ env.AX_RG_NAME_MAIN }} `
          #  -KeyVaultName "${{ env.AX_KEYVAULT_NAME_MAIN }}" `
          #  -PublicNetworkAccess "Disabled" `
          #  -DefaultAction "Deny"

      - name: Deploy Controller VM and PIP and NIC and DCE/DCR association
        if: success()
        shell: pwsh
        run: |
          Import-Module "${{ env.AX_MODULE_PATH_PLZM_AZURE }}" -Force

          $ConfigConstants = plzm.Azure\Get-ConfigFromFile -ConfigFilePath "${{ env.AX_CONFIG_FILE_INFRA_CONSTANTS }}"
          $ConfigMain = plzm.Azure\Get-ConfigFromFile -ConfigFilePath "${{ env.AX_CONFIG_FILE_INFRA_MAIN }}"
          $ConfigController = plzm.Azure\Get-ConfigFromFile -ConfigFilePath "${{ env.AX_CONFIG_FILE_INFRA_CONTROLLER }}"
          $SubscriptionId = "${{ secrets.AZURE_SUBSCRIPTION_ID }}"

          $osDiskName = plzm.Azure\Get-ResourceName -ConfigConstants $ConfigConstants -ConfigMain $ConfigMain -Prefix $ConfigConstants.PrefixOsDisk -Sequence $ConfigController.IdForNaming

          # Deploy PIP
          $output = plzm.Azure\Deploy-NetworkPublicIp `
            -SubscriptionID "$SubscriptionId" `
            -Location $ConfigController.Location `
            -ResourceGroupName ${{ env.AX_RG_NAME_CONTROLLER }} `
            -TemplateUri ($ConfigConstants.TemplateUriPrefix + "net.public-ip.json") `
            -PublicIpAddressName ${{ env.AX_VM_PIP_NAME_CONTROLLER }} `
            -PublicIpAddressType $ConfigController.Network.PublicIp.Type `
            -PublicIpAddressSku $ConfigController.Network.PublicIp.Sku `
            -HostName ${{ env.AX_VM_HOSTNAME_CONTROLLER}}


          $output = plzm.Azure\Deploy-DiagnosticsSetting `
            -SubscriptionID "$SubscriptionId" `
            -ResourceGroupName ${{ env.AX_RG_NAME_CONTROLLER }} `
            -TemplateUri ($ConfigConstants.TemplateUriPrefix + "diagnostic-settings.json") `
            -ResourceId ${{ env.AX_VM_PIP_RESOURCE_ID_CONTROLLER }} `
            -DiagnosticsSettingName ("diag-" + "${{ env.AX_VM_PIP_NAME_CONTROLLER }}") `
            -LogAnalyticsWorkspaceId ${{ env.AX_LAW_RESOURCE_ID_MAIN }} `
            -SendAllLogs $true `
            -SendMetrics $true

          Write-Debug -Debug:$true -Message "$output"


          # Deploy NIC
          $output = plzm.Azure\Deploy-NetworkNic `
            -SubscriptionID "$SubscriptionId" `
            -Location $ConfigController.Location `
            -ResourceGroupName ${{ env.AX_RG_NAME_CONTROLLER }} `
            -TemplateUri ($ConfigConstants.TemplateUriPrefix + "net.network-interface.json") `
            -NicName ${{ env.AX_VM_NIC_NAME_CONTROLLER }} `
            -SubnetResourceId ${{ env.AX_SUBNET_RESOURCE_ID_MAIN}} `
            -EnableAcceleratedNetworking $ConfigController.Network.Nic.EnableAcceleratedNetworking `
            -PublicIpResourceId ${{ env.AX_VM_PIP_RESOURCE_ID_CONTROLLER}} `
            -IpConfigName $ConfigController.Network.Nic.IpConfigurationName

          $output = plzm.Azure\Deploy-DiagnosticsSetting `
            -SubscriptionID "$SubscriptionId" `
            -ResourceGroupName ${{ env.AX_RG_NAME_CONTROLLER }} `
            -TemplateUri ($ConfigConstants.TemplateUriPrefix + "diagnostic-settings.json") `
            -ResourceId ${{ env.AX_VM_NIC_RESOURCE_ID_CONTROLLER }} `
            -DiagnosticsSettingName ("diag-" + "${{ env.AX_VM_NIC_NAME_CONTROLLER }}") `
            -LogAnalyticsWorkspaceId ${{ env.AX_LAW_RESOURCE_ID_MAIN }} `
            -SendAllLogs $false `
            -SendMetrics $true

          Write-Debug -Debug:$true -Message "$output"


          # Deploy VM

          $output = plzm.Azure\Deploy-Vm `
            -SubscriptionID "$SubscriptionId" `
            -Location $ConfigController.Location `
            -ResourceGroupName ${{ env.AX_RG_NAME_CONTROLLER }} `
            -TemplateUri ($ConfigConstants.TemplateUriPrefix + "vm.linux.json") `
            -VmName ${{ env.AX_VM_NAME_CONTROLLER }} `
            -AssignSystemIdentity $false `
            -UaiResourceId "${{ env.AX_UAI_RESOURCE_ID_CONTROLLER }}" `
            -VmSize $ConfigController.Vm.Size `
            -VmPublisher $ConfigController.Vm.Publisher `
            -VmOffer $ConfigController.Vm.Offer `
            -VmSku $ConfigController.Vm.Sku `
            -ProvisionVmAgent $true `
            -VmAdminUsername "${{ env.AX_VM_ADMIN_USERNAME }}" `
            -VmAdminSshPublicKey "${{ env.AX_VM_SSH_PUBLIC_KEY }}" `
            -VmTimeZone "UTC" `
            -OsDiskName $osDiskName `
            -OsDiskStorageType $ConfigController.Vm.OsDisk.Type `
            -OsDiskSizeInGB $ConfigController.Vm.OsDisk.SizeInGB `
            -VmAutoShutdownTime "9999" `
            -NetworkInterfaceResourceId "${{ env.AX_VM_NIC_RESOURCE_ID_CONTROLLER }}" `
            -EnableBootDiagnostics $true `
            -BootDiagnosticsStorageAccountName "${{ env.AX_STORAGE_ACCOUNT_NAME_MAIN }}"

          Write-Debug -Debug:$true -Message "$output"


          # Deploy Diagnostics Setting

          $output = plzm.Azure\Deploy-DiagnosticsSetting `
            -SubscriptionID "$SubscriptionId" `
            -ResourceGroupName ${{ env.AX_RG_NAME_CONTROLLER }} `
            -TemplateUri ($ConfigConstants.TemplateUriPrefix + "diagnostic-settings.json") `
            -ResourceId ${{ env.AX_VM_RESOURCE_ID_CONTROLLER }} `
            -DiagnosticsSettingName ("diag-" + "${{ env.AX_VM_NAME_CONTROLLER }}") `
            -LogAnalyticsWorkspaceId ${{ env.AX_LAW_RESOURCE_ID_MAIN }} `
            -SendAllLogs $false `
            -SendMetrics $true

          Write-Debug -Debug:$true -Message "$output"

          # Deploy Azure Monitor Agent

          $output = plzm.Azure\Deploy-VmAmaLinux `
            -SubscriptionID "$SubscriptionId" `
            -Location $ConfigController.Location `
            -ResourceGroupName ${{ env.AX_RG_NAME_CONTROLLER }} `
            -TemplateUri ($ConfigConstants.TemplateUriPrefix + "vm.extension.azure-monitor-agent.linux.json") `
            -VmName ${{ env.AX_VM_NAME_CONTROLLER }}

          Write-Debug -Debug:$true -Message "$output"

          # Deploy Azure Data Collection Rule and Endpoint Association

          $output = Deploy-MonitorDataCollectionRuleAssociation `
            -SubscriptionID "$SubscriptionId" `
            -ResourceGroupName ${{ env.AX_RG_NAME_CONTROLLER }} `
            -TemplateUri ($ConfigConstants.TemplateUriPrefix + "monitor.data-collection-rule-association.json") `
            -DataCollectionEndpointResourceId ${{ env.AX_DCE_RESOURCE_ID }} `
            -DataCollectionRuleResourceId ${{ env.AX_DCR_RESOURCE_ID }} `
            -ScopedResourceId ${{ env.AX_VM_RESOURCE_ID_CONTROLLER }}

          Write-Debug -Debug:$true -Message "$output"

      - name: Set Controller IP addresses to Env Vars
        if: success()
        shell: pwsh
        run: |
          Import-Module "${{ env.AX_MODULE_PATH_PLZM_AZURE }}" -Force

          Write-Debug -Debug:$true -Message "${{ env.AX_RG_NAME_CONTROLLER }}"
          Write-Debug -Debug:$true -Message "${{ env.AX_VM_NIC_NAME_CONTROLLER }}"

          az network nic show -g ${{ env.AX_RG_NAME_CONTROLLER }} -n ${{ env.AX_VM_NIC_NAME_CONTROLLER }}

          $controllerVmPrivateIp = "$(az network nic show -g ${{ env.AX_RG_NAME_CONTROLLER }} -n ${{ env.AX_VM_NIC_NAME_CONTROLLER }} -o tsv --query 'ipConfigurations[0].privateIPAddress')"
          Write-Debug -Debug:$true -Message "controllerVmPrivateIp: $controllerVmPrivateIp"
          plzm.Azure\Set-EnvVar2 -VarName "AX_VM_PRIVATE_IP_ADDRESS" -VarValue "$controllerVmPrivateIp"

          $controllerVmPublicIp = "$(az network public-ip show -g ${{ env.AX_RG_NAME_CONTROLLER }} -n ${{ env.AX_VM_PIP_NAME_CONTROLLER }} -o tsv --query 'ipAddress')"
          Write-Debug -Debug:$true -Message "controllerVmPublicIp: $controllerVmPublicIp"
          plzm.Azure\Set-EnvVar2 -VarName "AX_VM_PUBLIC_IP_ADDRESS" -VarValue "$controllerVmPublicIp"

      - name: Add durable NSG rule for premise equipment access to Controller VM
        if: success()
        shell: pwsh
        run: |
          Import-Module "${{ env.AX_MODULE_PATH_PLZM_AZURE }}" -Force

          $ConfigConstants = plzm.Azure\Get-ConfigFromFile -ConfigFilePath "${{ env.AX_CONFIG_FILE_INFRA_CONSTANTS }}"
          $ConfigMain = plzm.Azure\Get-ConfigFromFile -ConfigFilePath "${{ env.AX_CONFIG_FILE_INFRA_MAIN }}"
          $ConfigController = plzm.Azure\Get-ConfigFromFile -ConfigFilePath "${{ env.AX_CONFIG_FILE_INFRA_CONTROLLER }}"

          $nsgRule = $ConfigController.Network.NSG.Rules[0]

          $SubscriptionId = "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          $nsgRuleName = $ConfigController.IdForNaming

          $controllerVmPrivateIp = "${{ env.AX_VM_PRIVATE_IP_ADDRESS }}"
          Write-Debug -Debug:$true -Message "controllerVmPrivateIp: $controllerVmPrivateIp"

          $output = plzm.Azure\Deploy-NetworkSecurityGroupRule `
            -SubscriptionID "$SubscriptionId" `
            -ResourceGroupName ${{ env.AX_RG_NAME_MAIN }} `
            -TemplateUri ($ConfigConstants.TemplateUriPrefix + "net.nsg.rule.json") `
            -NSGName ${{ env.AX_NSG_NAME }} `
            -NSGRuleName $nsgRuleName `
            -Description $nsgRule.Description `
            -Priority ($ConfigConstants.NsgRulePriorityBase + $ConfigController.Id) `
            -Direction $nsgRule.Direction `
            -Access $nsgRule.Access `
            -Protocol $nsgRule.Protocol `
            -SourceAddressPrefix $nsgRule.SourceAddressPrefix `
            -SourceAddressPrefixes $nsgRule.SourceAddressPrefixes `
            -SourcePortRange $nsgRule.SourcePortRange `
            -SourcePortRanges $nsgRule.SourcePortRanges `
            -DestinationAddressPrefix $controllerVmPrivateIp `
            -DestinationAddressPrefixes $nsgRule.DestinationAddressPrefixes `
            -DestinationPortRange $nsgRule.DestinationPortRange `
            -DestinationPortRanges $nsgRule.DestinationPortRanges

          Write-Debug -Debug:$true -Message "$output"

      - name: Add transient NSG rule for GitHub runner access to Controller VM
        if: success()
        shell: pwsh
        run: |
          Import-Module "${{ env.AX_MODULE_PATH_PLZM_AZURE }}" -Force

          $ConfigConstants = plzm.Azure\Get-ConfigFromFile -ConfigFilePath "${{ env.AX_CONFIG_FILE_INFRA_CONSTANTS }}"
          $ConfigMain = plzm.Azure\Get-ConfigFromFile -ConfigFilePath "${{ env.AX_CONFIG_FILE_INFRA_MAIN }}"
          $ConfigController = plzm.Azure\Get-ConfigFromFile -ConfigFilePath "${{ env.AX_CONFIG_FILE_INFRA_CONTROLLER }}"
          $ConfigControllerSsh = plzm.Azure\Get-ConfigFromFile -ConfigFilePath "${{ env.AX_CONFIG_FILE_INFRA_CONTROLLER_SSH }}"

          $SubscriptionId = "${{ secrets.AZURE_SUBSCRIPTION_ID }}"

          $controllerVmPrivateIp = "${{ env.AX_VM_PRIVATE_IP_ADDRESS }}"
          Write-Debug -Debug:$true -Message "controllerVmPrivateIp: $controllerVmPrivateIp"

          # GHA runner SSH to Controller VM
          $index = 1
          $nsgRule = $ConfigControllerSsh.Network.NSG.Rules[$index]
          $nsgRuleName = $ConfigController.IdForNaming + $ConfigConstants.SuffixNsgRuleNameGhaAccess
          $priority = ($ConfigConstants.NsgRulePriorityBase + $ConfigConstants.NsgRulePriorityPlusTransient + $ConfigController.Id + $index)
          Write-Debug -Debug:$true -Message "$nsgRuleName priority: $priority"

          $output = plzm.Azure\Deploy-NetworkSecurityGroupRule `
            -SubscriptionID "$SubscriptionId" `
            -ResourceGroupName ${{ env.AX_RG_NAME_MAIN }} `
            -TemplateUri ($ConfigConstants.TemplateUriPrefix + "net.nsg.rule.json") `
            -NSGName ${{ env.AX_NSG_NAME }} `
            -NSGRuleName $nsgRuleName `
            -Description $nsgRule.Description `
            -Priority $priority `
            -Direction $nsgRule.Direction `
            -Access $nsgRule.Access `
            -Protocol "*" `
            -SourceAddressPrefix ${{ env.AX_GITHUB_RUNNER_PUBLIC_IP }} `
            -SourcePortRange $nsgRule.SourcePortRange `
            -DestinationAddressPrefix $controllerVmPrivateIp `
            -DestinationPortRange $nsgRule.DestinationPortRange `
            -DestinationPortRanges $nsgRule.DestinationPortRanges

          Write-Debug -Debug:$true -Message "$output"

      - name: Prepare script files to run on Controller
        if: success()
        shell: pwsh
        run: |
          Import-Module "${{ env.AX_MODULE_PATH_PLZM_AZURE }}" -Force

          $ConfigConstants = plzm.Azure\Get-ConfigFromFile -ConfigFilePath "${{ env.AX_CONFIG_FILE_INFRA_CONSTANTS }}"
          $ConfigMain = plzm.Azure\Get-ConfigFromFile -ConfigFilePath "${{ env.AX_CONFIG_FILE_INFRA_MAIN }}"
          $ConfigController = plzm.Azure\Get-ConfigFromFile -ConfigFilePath "${{ env.AX_CONFIG_FILE_INFRA_CONTROLLER }}"
          $SubscriptionId = "${{ secrets.AZURE_SUBSCRIPTION_ID }}"

          $controllerFqdn = $ConfigController.HostNamePrefix + $ConfigController.IdForNaming + "." + $ConfigController.DomainName
          $contactEmail = $ConfigMain.ContactEmail

          Write-Debug -Debug:$true -Message "Updating Certbot script file with Controller FQDN $controllerFqdn and Contact Email $contactEmail"
          $configScript = Get-Content -Path "./scripts/controller/controller_2.sh" -Raw
          $configScript = $configScript.Replace("{{VM_FQDN}}", "$controllerFqdn").Replace("{{CONTACT_EMAIL}}", "$contactEmail")
          Set-Content -Path "./scripts/controller/controller_2.sh" -Value $configScript

          Write-Debug -Debug:$true -Message "Updating Certificate import script file with Controller FQDN $controllerFqdn"
          $certScript = Get-Content -Path "./scripts/controller/controller_3.sh" -Raw
          $certScript = $certScript.Replace("{{VM_FQDN}}", "$controllerFqdn")
          Set-Content -Path "./scripts/controller/controller_3.sh" -Value $certScript

      - name: Add SSH Key to SSH Agent on GitHub Runner
        if: success()
        shell: bash
        run: |
          # Add private SSH key to SSH agent
          eval `ssh-agent -s`

          sshAddCmd="ssh-add ${{ env.AX_VM_SSH_PRIVATE_KEY_FILE_PATH }}"
          echo "$sshAddCmd"
          eval $sshAddCmd

      - name: Upload script files to Controller VM
        if: success()
        shell: bash
        run: |
          scp -r -i ${{ env.AX_VM_SSH_PRIVATE_KEY_FILE_PATH }} -o StrictHostKeyChecking=no ./scripts/controller/ ${{ env.AX_VM_ADMIN_USERNAME }}@${{ env.AX_VM_PUBLIC_IP_ADDRESS }}:~

          sshCmd="ssh ${{ env.AX_VM_ADMIN_USERNAME }}@${{ env.AX_VM_PUBLIC_IP_ADDRESS }} -i ${{ env.AX_VM_SSH_PRIVATE_KEY_FILE_PATH }} 'chmod +x ~/controller/controller_*.sh; sudo mv ~/controller/controller_*.sh /usr/local/bin/; rm -rf ./controller'"
          echo "$sshCmd"
          eval $sshCmd

      - name: Run script 1 on Controller VM
        if: success()
        shell: bash
        run: |
          sshCmd="ssh ${{ env.AX_VM_ADMIN_USERNAME }}@${{ env.AX_VM_PUBLIC_IP_ADDRESS }} -i ${{ env.AX_VM_SSH_PRIVATE_KEY_FILE_PATH }} 'sudo bash /usr/local/bin/controller_1.sh'"
          echo "$sshCmd"
          eval $sshCmd

      - name: Run script 2 on Controller VM
        if: success()
        shell: bash
        run: |
          sshCmd="ssh ${{ env.AX_VM_ADMIN_USERNAME }}@${{ env.AX_VM_PUBLIC_IP_ADDRESS }} -i ${{ env.AX_VM_SSH_PRIVATE_KEY_FILE_PATH }} 'sudo bash /usr/local/bin/controller_2.sh'"
          echo "$sshCmd"
          eval $sshCmd

      - name: Run script 3 on Controller VM
        if: success()
        shell: bash
        run: |
          sshCmd="ssh ${{ env.AX_VM_ADMIN_USERNAME }}@${{ env.AX_VM_PUBLIC_IP_ADDRESS }} -i ${{ env.AX_VM_SSH_PRIVATE_KEY_FILE_PATH }} 'sudo bash /usr/local/bin/controller_3.sh'"
          echo "$sshCmd"
          eval $sshCmd

      - name: Remove SSH Key
        if: always()
        shell: bash
        run: |
          file="${{ env.AX_VM_SSH_PRIVATE_KEY_FILE_PATH }}"

          if [ -f "$file" ]; then
            eval $(ssh-agent)
            sshAddCmd="ssh-add -d ${{ env.AX_VM_SSH_PRIVATE_KEY_FILE_PATH }}"
            eval $sshAddCmd
          else
              echo "$file does not exist."
          fi

      - name: Remove SSH Key Files
        if: always()
        shell: pwsh
        run: |
          Import-Module "${{ env.AX_MODULE_PATH_PLZM_AZURE }}" -Force

          $ConfigConstants = plzm.Azure\Get-ConfigFromFile -ConfigFilePath "${{ env.AX_CONFIG_FILE_INFRA_CONSTANTS }}"

          # Key filenames
          $filePathPrivate = "${{ env.AX_VM_SSH_PRIVATE_KEY_FILE_PATH }}"
          $filePathPublic = "${{ env.AX_VM_SSH_PUBLIC_KEY_FILE_PATH }}"
          $filePathKnownHosts = "${{ env.AX_VM_SSH_PATH }}" + "/" + "known_hosts"

          # Delete key files if exist
          if (Test-Path $filePathPrivate) { Remove-Item -Path $filePathPrivate -Force }
          if (Test-Path $filePathPublic) { Remove-Item -Path $filePathPublic -Force }

          # Delete known_hosts if exist
          if (Test-Path $filePathKnownHosts) { Remove-Item -Path $filePathKnownHosts -Force }

      - name: Remove transient NSG rule for GitHub runner access to Controller VM
        if: always()
        shell: pwsh
        run: |
          Import-Module "${{ env.AX_MODULE_PATH_PLZM_AZURE }}" -Force

          $ConfigConstants = plzm.Azure\Get-ConfigFromFile -ConfigFilePath "${{ env.AX_CONFIG_FILE_INFRA_CONSTANTS }}"
          $ConfigController = plzm.Azure\Get-ConfigFromFile -ConfigFilePath "${{ env.AX_CONFIG_FILE_INFRA_CONTROLLER }}"

          $SubscriptionId = "${{ secrets.AZURE_SUBSCRIPTION_ID }}"

          $nsgRuleName = $ConfigController.IdForNaming + $ConfigConstants.SuffixNsgRuleNameGhaAccess

          $output = plzm.Azure\Remove-NetworkSecurityGroupRule `
            -SubscriptionID "$SubscriptionId" `
            -ResourceGroupName ${{ env.AX_RG_NAME_MAIN }} `
            -NSGName ${{ env.AX_NSG_NAME }} `
            -NSGRuleName $nsgRuleName

          Write-Debug -Debug:$true -Message "$output"

      - name: Deploy Metric Alerts
        if: success()
        shell: pwsh
        run: |
          Import-Module "${{ env.AX_MODULE_PATH_PLZM_AZURE }}" -Force

          $ConfigConstants = plzm.Azure\Get-ConfigFromFile -ConfigFilePath "${{ env.AX_CONFIG_FILE_INFRA_CONSTANTS }}"
          $ConfigMain = plzm.Azure\Get-ConfigFromFile -ConfigFilePath "${{ env.AX_CONFIG_FILE_INFRA_MAIN }}"
          $ConfigController = plzm.Azure\Get-ConfigFromFile -ConfigFilePath "${{ env.AX_CONFIG_FILE_INFRA_CONTROLLER }}"
          $SubscriptionId = "${{ secrets.AZURE_SUBSCRIPTION_ID }}"

          $metricAlerts = $ConfigMain.Observability.MetricAlertsVM

          foreach ($alert in $metricAlerts.Alerts)
          {
            $metricAlertName = Get-ResourceName -ConfigConstants $ConfigConstants -ConfigMain $ConfigMain -Prefix $ConfigConstants.PrefixMetricAlert -Sequence $ConfigController.IdForNaming -Suffix $alert.Suffix

            $output = plzm.Azure\Deploy-MetricAlert `
              -SubscriptionID "$SubscriptionId" `
              -ResourceGroupName "${{ env.AX_RG_NAME_CONTROLLER }}" `
              -TemplateUri ($ConfigConstants.TemplateUriPrefix + "monitor.metric-alert.json") `
              -MetricAlertName "$metricAlertName" `
              -Severity $($alert.Severity) `
              -TargetResourceType "$($metricAlerts.TargetResourceType)" `
              -TargetResourceId "${{ env.AX_VM_RESOURCE_ID_CONTROLLER }}" `
              -EvaluationFrequency "$($alert.EvaluationFrequency)" `
              -WindowSize "$($alert.WindowSize)" `
              -MetricNamespace "$($alert.MetricNamespace)" `
              -MetricName "$($alert.MetricName)" `
              -Operator "$($alert.Operator)"`
              -Threshold $alert.Threshold `
              -TimeAggregation "$($alert.TimeAggregation)" `
              -ActionGroupId "${{ env.AX_ACG_RESOURCE_ID_MAIN }}" `
              -Tags "$($alert.Tags)"
          }

          $metricAlerts = $ConfigMain.Observability.MetricAlertsIP

          foreach ($alert in $metricAlerts.Alerts)
          {
            $metricAlertName = Get-ResourceName -ConfigConstants $ConfigConstants -ConfigMain $ConfigMain -Prefix $ConfigConstants.PrefixMetricAlert -Sequence $ConfigController.IdForNaming -Suffix $alert.Suffix

            $output = plzm.Azure\Deploy-MetricAlert `
              -SubscriptionID "$SubscriptionId" `
              -ResourceGroupName "${{ env.AX_RG_NAME_CONTROLLER }}" `
              -TemplateUri ($ConfigConstants.TemplateUriPrefix + "monitor.metric-alert.json") `
              -MetricAlertName "$metricAlertName" `
              -Severity $($alert.Severity) `
              -TargetResourceType "$($metricAlerts.TargetResourceType)" `
              -TargetResourceId "${{ env.AX_VM_PIP_RESOURCE_ID_CONTROLLER }}" `
              -EvaluationFrequency "$($alert.EvaluationFrequency)" `
              -WindowSize "$($alert.WindowSize)" `
              -MetricNamespace "$($alert.MetricNamespace)" `
              -MetricName "$($alert.MetricName)" `
              -Operator "$($alert.Operator)"`
              -Threshold $alert.Threshold `
              -TimeAggregation "$($alert.TimeAggregation)" `
              -ActionGroupId "${{ env.AX_ACG_RESOURCE_ID_MAIN }}" `
              -Tags "$($alert.Tags)"
          }

      - name: Azure logout
        if: always()
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az logout
            az cache purge
            az account clear

...