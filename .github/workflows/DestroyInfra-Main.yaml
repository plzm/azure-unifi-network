---
name: Destroy Infrastructure-Main

on: 
  workflow_dispatch:

jobs:
  destroy-infra-main:
    name: Destroy Infrastructure - Main
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set Azure CLI extensions to auto-install
        if: success()
        run: |
          $output = az config set extension.use_dynamic_install=yes_without_prompt | ConvertFrom-Json

          Write-Debug -Debug:$true -Message "$output"
        shell: pwsh

      - name: Azure login
        if: success()
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      - name: Download and import plzm.Azure module
        if: success()
        shell: pwsh
        run: |
          $urlRoot = "${{ vars.URL_ROOT_MODULE_PLZM_AZURE }}"
          $moduleName = "plzm.Azure"
          $localFolderPath = "./modules/$moduleName/"
          $psm1FileName = "$moduleName.psm1"
          $psd1FileName = "$moduleName.psd1"

          if (!(Test-Path -Path $localFolderPath)) {
            New-Item -Path $localFolderPath -ItemType "Directory" -Force
          }

          # PSM1 file
          $url = ($urlRoot + $psm1FileName)
          Invoke-WebRequest -Uri "$url" -OutFile ($localFolderPath + $psm1FileName)

          # PSD1 file
          $url = ($urlRoot + $psd1FileName)
          Invoke-WebRequest -Uri "$url" -OutFile ($localFolderPath + $psd1FileName)

          Import-Module "$localFolderPath" -Force

          Get-Timestamp
          plzm.Azure\Get-Timestamp

      - name: Set Config File Paths to Environment
        if: success()
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"

          plzm.Azure\Set-EnvVar2 -VarName "AA_CONFIG_FILE_INFRA_CONSTANTS" -VarValue "./config/infra_constants.json"
          plzm.Azure\Set-EnvVar2 -VarName "AA_CONFIG_FILE_INFRA_MAIN" -VarValue ("./config/infra_main.json")


      - name: Set Variables and write to Environment - Main
        if: success()
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"

          . ./scripts/infra/Variables.ps1

          $ConfigConstants = plzm.Azure\Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_CONSTANTS }}"
          $ConfigMain = plzm.Azure\Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_MAIN }}"
          $SubscriptionId = "${{ secrets.AZURE_SUBSCRIPTION_ID }}"

          Set-VariablesMain `
            -ConfigConstants $ConfigConstants `
            -ConfigMain $ConfigMain `
            -SubscriptionId $SubscriptionId


      - name: Delete Diagnostics Settings
        if: success()
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"

          plzm.Azure\Remove-DiagnosticsSettingsForAllResources `
            -SubscriptionId "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
            -LogAnalyticsWorkspaceId "${{ env.AA_LAW_RESOURCE_ID_MAIN }}"



      - name: Delete UAI Role Assignments
        if: success()
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"

          $uaiName = "${{ env.AA_UAI_NAME_MAIN }}"
          Write-Debug -Debug:$true -Message "Get UAI $uaiName"
          $uai = "$(az identity show -g ${{ env.AA_RG_NAME_MAIN }} -n $uaiName)" | ConvertFrom-Json

          $output = plzm.Azure\Remove-RoleAssignments `
            -SubscriptionId "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
            -PrincipalId $uai.principalId
 
          Write-Debug -Debug:$true -Message "$output"


      - name: Delete Resource Groups
        if: success()
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"

          $configConstants = plzm.Azure\Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_CONSTANTS }}"
          $configMain = plzm.Azure\Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_MAIN }}"

          $rgExists = plzm.Azure\Test-ResourceGroupExists `
            -SubscriptionId "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
            -ResourceGroupName "${{ env.AA_RG_NAME_MAIN }}"

          if ($rgExists)
          {
            az group delete -y `
              --subscription "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
              -n "${{ env.AA_RG_NAME_MAIN }}"
          }


      - name: Azure logout
        if: always()
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az logout
            az cache purge
            az account clear
...