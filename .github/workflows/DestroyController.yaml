---
  name: Destroy Controller
  
  on: 
    workflow_dispatch:
  
  jobs:
    destroy-controller:
      name: Destroy Controller
      runs-on: ubuntu-latest
      steps:
        - name: Checkout repository
          uses: actions/checkout@v3
  
        - name: Set Azure CLI extensions to auto-install
          if: success()
          run: |
            $output = az config set extension.use_dynamic_install=yes_without_prompt | ConvertFrom-Json
  
            Write-Debug -Debug:$true -Message "$output"
          shell: pwsh
  
        - name: Azure login
          if: success()
          uses: azure/login@v1
          with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}
            enable-AzPSSession: true

        - name: Download and import plzm.Azure module
          if: success()
          shell: pwsh
          run: |
            $urlRoot = "${{ vars.URL_ROOT_MODULE_PLZM_AZURE }}"
            $moduleName = "plzm.Azure"
            $localFolderPath = "./modules/$moduleName/"
            $psm1FileName = "$moduleName.psm1"
            $psd1FileName = "$moduleName.psd1"

            if (!(Test-Path -Path $localFolderPath)) {
              New-Item -Path $localFolderPath -ItemType "Directory" -Force
            }

            # PSM1 file
            $url = ($urlRoot + $psm1FileName)
            Invoke-WebRequest -Uri "$url" -OutFile ($localFolderPath + $psm1FileName)

            # PSD1 file
            $url = ($urlRoot + $psd1FileName)
            Invoke-WebRequest -Uri "$url" -OutFile ($localFolderPath + $psd1FileName)

            Import-Module "$localFolderPath" -Force

            plzm.Azure\Set-EnvVar2 -VarName "AA_MODULE_PATH_PLZM_AZURE" -VarValue "$localFolderPath"

            Get-Timestamp
            plzm.Azure\Get-Timestamp


        - name: Set Config File Paths to Environment
          if: success()
          shell: pwsh
          run: |
            $ErrorActionPreference = "Stop"

            Import-Module "${{ env.AA_MODULE_PATH_PLZM_AZURE }}" -Force

            plzm.Azure\Set-EnvVar2 -VarName "AA_CONFIG_FILE_INFRA_CONSTANTS" -VarValue "./config/infra_constants.json"
            plzm.Azure\Set-EnvVar2 -VarName "AA_CONFIG_FILE_INFRA_MAIN" -VarValue ("./config/infra_main.json")
            plzm.Azure\Set-EnvVar2 -VarName "AA_CONFIG_FILE_INFRA_CONTROLLER" -VarValue ("./config/infra_controller.json")

        - name: Set Variables
          if: success()
          shell: pwsh
          run: |
            $ErrorActionPreference = "Stop"

            Import-Module "${{ env.AA_MODULE_PATH_PLZM_AZURE }}" -Force

            . ./scripts/Variables.ps1

            $ConfigConstants = plzm.Azure\Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_CONSTANTS }}"
            $ConfigMain = plzm.Azure\Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_MAIN }}"
            $ConfigController = plzm.Azure\Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_CONTROLLER }}"
            $SubscriptionId = "${{ secrets.AZURE_SUBSCRIPTION_ID }}"

            Set-VariablesMain `
              -ConfigConstants $ConfigConstants `
              -ConfigMain $ConfigMain `
              -SubscriptionId $SubscriptionId

            Set-VariablesController `
              -ConfigConstants $ConfigConstants `
              -ConfigMain $ConfigMain `
              -ConfigController $ConfigController `
              -SubscriptionId $SubscriptionId

        - name: Remove NSG rule
          if: success()
          shell: pwsh
          run: |
            $ErrorActionPreference = "Stop"

            Import-Module "${{ env.AA_MODULE_PATH_PLZM_AZURE }}" -Force

            $ConfigConstants = plzm.Azure\Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_CONSTANTS }}"
            $ConfigMain = plzm.Azure\Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_MAIN }}"
            $ConfigController = plzm.Azure\Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_CONTROLLER }}"

            $nsgRule = $ConfigController.Network.NSG.Rules[0]

            $SubscriptionId = "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
            $nsgRuleName = $ConfigController.IdForNaming

            $output = plzm.Azure\Remove-NetworkSecurityGroupRule `
              -SubscriptionID "$SubscriptionId" `
              -ResourceGroupName ${{ env.AA_RG_NAME_MAIN }} `
              -NSGName ${{ env.AA_NSG_NAME }} `
              -NSGRuleName $nsgRuleName

        - name: Delete Diagnostics Settings
          if: success()
          shell: pwsh
          run: |
            $ErrorActionPreference = "Stop"

            Import-Module "${{ env.AA_MODULE_PATH_PLZM_AZURE }}" -Force

            # PIP
            plzm.Azure\Remove-DiagnosticsSettingsForResource `
              -SubscriptionId "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
              -LogAnalyticsWorkspaceId "${{ env.AA_LAW_RESOURCE_ID_MAIN }}" `
              -ResourceId "${{ env.AA_VM_PIP_RESOURCE_ID_CONTROLLER }}" `
              -ResourceName "${{ env.AA_VM_PIP_NAME_CONTROLLER }}"

            # NIC
            plzm.Azure\Remove-DiagnosticsSettingsForResource `
              -SubscriptionId "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
              -LogAnalyticsWorkspaceId "${{ env.AA_LAW_RESOURCE_ID_MAIN }}" `
              -ResourceId "${{ env.AA_VM_NIC_RESOURCE_ID_CONTROLLER }}" `
              -ResourceName "${{ env.AA_VM_NIC_NAME_CONTROLLER }}"

            # VM
            plzm.Azure\Remove-DiagnosticsSettingsForResource `
              -SubscriptionId "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
              -LogAnalyticsWorkspaceId "${{ env.AA_LAW_RESOURCE_ID_MAIN }}" `
              -ResourceId "${{ env.AA_VM_RESOURCE_ID_CONTROLLER }}" `
              -ResourceName "${{ env.AA_VM_NAME_CONTROLLER }}"

        - name: Delete UAI Role Assignments
          if: success()
          shell: pwsh
          run: |
            $ErrorActionPreference = "Stop"

            Import-Module "${{ env.AA_MODULE_PATH_PLZM_AZURE }}" -Force

            $ConfigConstants = plzm.Azure\Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_CONSTANTS }}"
            $ConfigMain = plzm.Azure\Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_MAIN }}"
            $ConfigController = plzm.Azure\Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_CONTROLLER }}"

            Write-Debug -Debug:$true -Message "Get UAI ${{ env.AA_UAI_NAME_CONTROLLER }}"
            $uai = "$(az identity show -g ${{ env.AA_RG_NAME_CONTROLLER }} -n ${{ env.AA_UAI_NAME_CONTROLLER }})" | ConvertFrom-Json
            $principalId = $uai.principalId

            Write-Debug -Debug:$true -Message "Remove sub-level role assignments"
            $output = plzm.Azure\Remove-RoleAssignments `
              -SubscriptionId "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
              -PrincipalId "$principalId"

            Write-Debug -Debug:$true -Message "Remove RG-level role assignments"
            $output = plzm.Azure\Remove-RoleAssignments `
              -SubscriptionId "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
              -ResourceGroupName "${{ env.AA_RG_NAME_CONTROLLER }}" `
              -PrincipalId "$principalId"
    
            Write-Debug -Debug:$true -Message "$output"

        - name: Delete Resource Group
          if: success()
          shell: pwsh
          run: |
            $ErrorActionPreference = "Stop"

            Import-Module "${{ env.AA_MODULE_PATH_PLZM_AZURE }}" -Force

            $configConstants = plzm.Azure\Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_CONSTANTS }}"
            $configMain = plzm.Azure\Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_MAIN }}"

            $rgExists = plzm.Azure\Test-ResourceGroupExists `
              -SubscriptionId "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
              -ResourceGroupName "${{ env.AA_RG_NAME_CONTROLLER }}"

            if ($rgExists)
            {
              az group delete -y `
                --subscription "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
                -n "${{ env.AA_RG_NAME_CONTROLLER }}"
            }


      - name: Azure logout
        if: always()
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az logout
            az cache purge
            az account clear
...