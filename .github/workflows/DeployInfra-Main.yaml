---
name: Deploy Infrastructure-Main

on: 
  workflow_dispatch:

jobs:
  deploy-infra-main:
    name: Deploy Infrastructure - Main
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set Azure CLI extensions to auto-install
        if: success()
        run: |
          $output = az config set extension.use_dynamic_install=yes_without_prompt | ConvertFrom-Json

          Write-Debug -Debug:$true -Message "$output"
        shell: pwsh

      - name: Azure login
        if: success()
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      - name: Register RPs
        if: success()
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"

          $output = az provider register --namespace "Microsoft.ChangeAnalysis" --accept-terms --consent-to-permissions --wait | ConvertFrom-Json

          Write-Debug -Debug:$true -Message "$output"


      - name: Set Config File Paths to Environment
        if: success()
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"

          . ./scripts/infra/Utility.ps1

          Set-EnvVar2 -VarName "AA_CONFIG_FILE_INFRA_CONSTANTS" -VarValue "./config/infra_constants.json"
          Set-EnvVar2 -VarName "AA_CONFIG_FILE_INFRA_MAIN" -VarValue ("./config/infra_main.json")


      - name: Set Variables and write to Environment - Main
        if: success()
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"

          . ./scripts/infra/Utility.ps1
          . ./scripts/infra/Network.ps1
          . ./scripts/infra/Variables.ps1

          $ConfigConstants = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_CONSTANTS }}"
          $ConfigMain = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_MAIN }}"
          $SubscriptionId = "${{ secrets.AZURE_SUBSCRIPTION_ID }}"

          Set-VariablesMain `
            -ConfigConstants $ConfigConstants `
            -ConfigMain $ConfigMain `
            -SubscriptionId $SubscriptionId


      - name: Create Resource Groups
        if: success()
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"

          . ./scripts/infra/Utility.ps1

          $ConfigConstants = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_CONSTANTS }}"
          $ConfigMain = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_MAIN }}"

          $SubscriptionId = "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          $rgNameMain = "${{ env.AA_RG_NAME_MAIN }}"

          Write-Debug -Debug:$true -Message "Create RG $rgNameMain"
          $output = az group create `
            --subscription "$SubscriptionId" `
            -l $ConfigMain.Location `
            -n "$rgNameMain" `
            --tags ${{ env.AA_TAGS_FOR_CLI }} `
            | ConvertFrom-Json


      - name: Deploy User Assigned Identity
        if: success()
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"

          . ./scripts/infra/Utility.ps1
          . ./scripts/infra/Security.ps1

          $ConfigConstants = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_CONSTANTS }}"
          $ConfigMain = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_MAIN }}"

          Write-Debug -Debug:$true -Message "Deploy UAI ${{ env.AA_UAI_NAME_MAIN }}"
          $output = Deploy-UAI `
            -SubscriptionID "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
            -Location $ConfigMain.Location `
            -ResourceGroupName "${{ env.AA_RG_NAME_MAIN }}" `
            -TemplateUri ($ConfigConstants.TemplateUriPrefix + "identity.user-assigned-identity.json") `
            -TenantId "${{ secrets.AZURE_TENANT_ID }}" `
            -UAIName "${{ env.AA_UAI_NAME_MAIN }}" `
            -Tags ${{ env.AA_TAGS_FOR_ARM }}

          Write-Debug -Debug:$true -Message "$output"

          Write-Debug -Debug:$true -Message "Sleep to allow UAI deploy to complete"
          Start-Sleep -s 60

          Write-Debug -Debug:$true -Message "Get UAI ${{ env.AA_UAI_NAME_MAIN }}"
          $uai = "$(az identity show -g ${{ env.AA_RG_NAME_MAIN }} -n ${{ env.AA_UAI_NAME_MAIN }})" | ConvertFrom-Json

          Set-EnvVar2 -VarName "AA_UAI_CLIENT_ID_MAIN" -VarValue $uai.clientId
          Set-EnvVar2 -VarName "AA_UAI_PRINCIPAL_ID_MAIN" -VarValue $uai.principalId


      - name: Deploy Role Assignments
        if: success()
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"

          . ./scripts/infra/Utility.ps1
          . ./scripts/infra/Security.ps1

          $ConfigConstants = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_CONSTANTS }}"
          $ConfigMain = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_MAIN }}"


          Write-Debug -Debug:$true -Message "Deploy Role Assignment | Deploy SP | KV Secrets Officer"
          $output = Deploy-RoleAssignmentSub `
            -Location $ConfigMain.Location `
            -TemplateUri ($ConfigConstants.TemplateUriPrefix + "authorization.role-assignment.sub.json") `
            -RoleDefinitionId $ConfigConstants.RoleDefinitionIdKeyVaultSecretsOfficer `
            -PrincipalId "${{ secrets.AZURE_SP_AA_INFRA_PRINCIPAL_ID }}"

          Write-Debug -Debug:$true -Message "$output"


          Write-Debug -Debug:$true -Message "Deploy Role Assignment | UAI | KV Certificates Officer"
          $output = Deploy-RoleAssignmentSub `
            -Location $ConfigMain.Location `
            -TemplateUri ($ConfigConstants.TemplateUriPrefix + "authorization.role-assignment.sub.json") `
            -RoleDefinitionId $ConfigConstants.RoleDefinitionIdKeyVaultCertificatesOfficer `
            -PrincipalId "${{ env.AA_UAI_PRINCIPAL_ID_MAIN }}"

          Write-Debug -Debug:$true -Message "$output"

          Write-Debug -Debug:$true -Message "Deploy Role Assignment | UAI | KV Crypto Officer"
          $output = Deploy-RoleAssignmentSub `
            -Location $ConfigMain.Location `
            -TemplateUri ($ConfigConstants.TemplateUriPrefix + "authorization.role-assignment.sub.json") `
            -RoleDefinitionId $ConfigConstants.RoleDefinitionIdKeyVaultCryptoOfficer `
            -PrincipalId "${{ env.AA_UAI_PRINCIPAL_ID_MAIN }}"

          Write-Debug -Debug:$true -Message "$output"

          Write-Debug -Debug:$true -Message "Deploy Role Assignment | UAI | KV Secrets Officer"
          $output = Deploy-RoleAssignmentSub `
            -Location $ConfigMain.Location `
            -TemplateUri ($ConfigConstants.TemplateUriPrefix + "authorization.role-assignment.sub.json") `
            -RoleDefinitionId $ConfigConstants.RoleDefinitionIdKeyVaultSecretsOfficer `
            -PrincipalId "${{ env.AA_UAI_PRINCIPAL_ID_MAIN }}"

          Write-Debug -Debug:$true -Message "$output"

          Write-Debug -Debug:$true -Message "Deploy Role Assignment | UAI | Monitoring Metrics Publisher"
          $output = Deploy-RoleAssignmentSub `
            -Location $ConfigMain.Location `
            -TemplateUri ($ConfigConstants.TemplateUriPrefix + "authorization.role-assignment.sub.json") `
            -RoleDefinitionId $ConfigConstants.RoleDefinitionIdMonitoringMetricsPublisher `
            -PrincipalId "${{ env.AA_UAI_PRINCIPAL_ID_MAIN }}"

          Write-Debug -Debug:$true -Message "$output"

          Write-Debug -Debug:$true -Message "Deploy Role Assignment | UAI | Storage Blob Data Contributor"
          $output = Deploy-RoleAssignmentSub `
            -Location $ConfigMain.Location `
            -TemplateUri ($ConfigConstants.TemplateUriPrefix + "authorization.role-assignment.sub.json") `
            -RoleDefinitionId $ConfigConstants.RoleDefinitionIdStorageBlobDataContributor `
            -PrincipalId "${{ env.AA_UAI_PRINCIPAL_ID_MAIN }}"

          Write-Debug -Debug:$true -Message "$output"

          Write-Debug -Debug:$true -Message "Deploy Role Assignment | UAI | Storage Blob Queue Contributor"
          $output = Deploy-RoleAssignmentSub `
            -Location $ConfigMain.Location `
            -TemplateUri ($ConfigConstants.TemplateUriPrefix + "authorization.role-assignment.sub.json") `
            -RoleDefinitionId $ConfigConstants.RoleDefinitionIdStorageQueueDataContributor `
            -PrincipalId "${{ env.AA_UAI_PRINCIPAL_ID_MAIN }}"

          Write-Debug -Debug:$true -Message "$output"

          Write-Debug -Debug:$true -Message "Deploy Role Assignment | App Services RP App Reg | Key Vault Secrets User"
          $output = Deploy-RoleAssignmentSub `
            -Location $ConfigMain.Location `
            -TemplateUri ($ConfigConstants.TemplateUriPrefix + "authorization.role-assignment.sub.json") `
            -RoleDefinitionId $ConfigConstants.RoleDefinitionIdKeyVaultSecretsUser `
            -PrincipalId $ConfigConstants.PrincipalIdAppServicesRp

          Write-Debug -Debug:$true -Message "$output"

          Write-Debug -Debug:$true -Message "Deploy Role Assignment | Diagnostic Services Trusted Storage Access | Storage Blob Data Contributor"
          $output = Deploy-RoleAssignmentSub `
            -Location $ConfigMain.Location `
            -TemplateUri ($ConfigConstants.TemplateUriPrefix + "authorization.role-assignment.sub.json") `
            -RoleDefinitionId $ConfigConstants.RoleDefinitionIdKeyVaultSecretsUser `
            -PrincipalId $ConfigConstants.PrincipalIdDiagnosticServicesTrustedStorageAccess

          Write-Debug -Debug:$true -Message "$output"


      - name: Deploy Observability
        if: success()
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"

          . ./scripts/infra/Utility.ps1
          . ./scripts/infra/Observability.ps1

          $ConfigConstants = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_CONSTANTS }}"
          $ConfigMain = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_MAIN }}"

          Write-Debug -Debug:$true -Message "Deploy LAW ${{ env.AA_LAW_NAME_MAIN }}"
          $output = Deploy-LogAnalyticsWorkspace `
            -SubscriptionID "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
            -Location $ConfigMain.Location `
            -ResourceGroupName ${{ env.AA_RG_NAME_MAIN }} `
            -TemplateUri ($ConfigConstants.TemplateUriPrefix + "monitor.log-analytics-workspace.json") `
            -WorkspaceName "${{ env.AA_LAW_NAME_MAIN }}" `
            -Tags ${{ env.AA_TAGS_FOR_ARM }}

          Write-Debug -Debug:$true -Message "$output"

          Write-Debug -Debug:$true -Message "Deploy Diagnostics"
          $output = Deploy-DiagnosticsSetting `
            -SubscriptionID "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
            -ResourceGroupName ${{ env.AA_RG_NAME_MAIN }} `
            -TemplateUri ($ConfigConstants.TemplateUriPrefix + "diagnostic-settings.json") `
            -ResourceId "${{ env.AA_LAW_RESOURCE_ID_MAIN }}" `
            -DiagnosticsSettingName ("diag-" + "${{ env.AA_LAW_NAME_MAIN }}") `
            -LogAnalyticsWorkspaceResourceId "${{ env.AA_LAW_RESOURCE_ID_MAIN }}" `
            -SendLogs $true `
            -SendMetrics $true

          Write-Debug -Debug:$true -Message "$output"


      - name: Deploy Network
        if: success()
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"

          . ./scripts/infra/Utility.ps1
          . ./scripts/infra/Observability.ps1
          . ./scripts/infra/Network.ps1

          $ConfigConstants = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_CONSTANTS }}"
          $ConfigMain = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_MAIN }}"

          Write-Debug -Debug:$true -Message "Deploy Network"
          Deploy-Network `
            -ConfigConstants $ConfigConstants `
            -ConfigMain $ConfigMain `
            -SubscriptionID "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
            -ResourceGroupName ${{ env.AA_RG_NAME_MAIN }} `
            -NSGName ${{ env.AA_NSG_NAME }} `
            -NSGResourceId ${{ env.AA_NSG_RESOURCE_ID }} `
            -VNetName ${{ env.AA_VNET_NAME }} `
            -VNetResourceId ${{ env.AA_VNET_RESOURCE_ID }} `
            -LogAnalyticsWorkspaceName "${{ env.AA_LAW_NAME_MAIN }}" `
            -LogAnalyticsWorkspaceResourceId "${{ env.AA_LAW_RESOURCE_ID_MAIN }}" `
            -Tags ${{ env.AA_TAGS_FOR_ARM }}


      - name: Deploy Private DNS zones
        if: success()
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"

          . ./scripts/infra/Utility.ps1
          . ./scripts/infra/Network.ps1

          $ConfigConstants = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_CONSTANTS }}"
          $ConfigMain = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_MAIN }}"

          Write-Debug -Debug:$true -Message "Deploy private DNS zones"
          Deploy-PrivateDnsZones `
            -ConfigConstants $ConfigConstants `
            -ConfigMain $ConfigMain `
            -SubscriptionID "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
            -ResourceGroupName ${{ env.AA_RG_NAME_MAIN }} `
            -VNetName ${{ env.AA_VNET_NAME }} `
            -Tags ${{ env.AA_TAGS_FOR_ARM }}


      - name: Deploy Azure Monitor Private Link Scope
        if: success()
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"

          . ./scripts/infra/Utility.ps1
          . ./scripts/infra/Observability.ps1
          . ./scripts/infra/Network.ps1

          $ConfigConstants = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_CONSTANTS }}"
          $ConfigMain = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_MAIN }}"

          $privateEndpointName = Get-ResourceName -ConfigConstants $ConfigConstants -ConfigMain $ConfigMain -Prefix $ConfigConstants.PrefixPrivateEndpoint -Sequence $ConfigConstants.SeqNumAmpls
          $privateLinkScopeNicName = Get-ResourceName -ConfigConstants $ConfigConstants -ConfigMain $ConfigMain -Prefix $ConfigConstants.PrefixNic -Sequence $ConfigConstants.SeqNumAmpls
          $privateLinkScopeNicResourceId = Get-ResourceId -SubscriptionId "${{ secrets.AZURE_SUBSCRIPTION_ID }}" -ResourceGroupName "${{ env.AA_RG_NAME_MAIN }}" -ResourceProviderName "Microsoft.Network" -ResourceTypeName "networkInterfaces" -ResourceName $privateLinkScopeNicName

          Write-Debug -Debug:$true -Message "Deploy AMPLS"
          $output = Deploy-Ampls `
            -SubscriptionID "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
            -ResourceGroupName ${{ env.AA_RG_NAME_MAIN }} `
            -TemplateUri ($ConfigConstants.TemplateUriPrefix + "monitor.private-link-scope.json") `
            -PrivateLinkScopeName ${{ env.AA_AMPLS_NAME_MAIN }} `
            -Tags ${{ env.AA_TAGS_FOR_ARM }}

          Write-Debug -Debug:$true -Message "$output"

          Write-Debug -Debug:$true -Message "Deploy AMPLS-LAW connection"
          $output = Deploy-ConnectLawToAmpls `
            -SubscriptionID "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
            -ResourceGroupName ${{ env.AA_RG_NAME_MAIN }} `
            -TemplateUri ($ConfigConstants.TemplateUriPrefix + "monitor.private-link-scope.scoped-resource.json") `
            -PrivateLinkScopeName ${{ env.AA_AMPLS_NAME_MAIN }} `
            -ScopedResourceId "${{ env.AA_LAW_RESOURCE_ID_MAIN }}" `
            -ScopedResourceName "${{ env.AA_LAW_NAME_MAIN }}"

          Write-Debug -Debug:$true -Message "$output"

          Write-Debug -Debug:$true -Message "Deploy AMPLS Private Endpoint and NIC"
          $output = Deploy-PrivateEndpointAndNic `
            -SubscriptionID "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
            -Location $ConfigMain.Location `
            -ResourceGroupName ${{ env.AA_RG_NAME_MAIN }} `
            -TemplateUri ($ConfigConstants.TemplateUriPrefix + "net.private-endpoint.json") `
            -ProtectedWorkloadResourceId ${{ env.AA_AMPLS_RESOURCE_ID_MAIN }} `
            -ProtectedWorkloadSubResource "azuremonitor" `
            -PrivateEndpointName $privateEndpointName `
            -NetworkInterfaceName $privateLinkScopeNicName `
            -SubnetResourceId ${{ env.AA_SUBNET_RESOURCE_ID_MAIN }} `
            -Tags ${{ env.AA_TAGS_FOR_ARM }}

          Write-Debug -Debug:$true -Message "$output"

          Write-Debug -Debug:$true -Message "Deploy NIC Diagnostics"
          $output = Deploy-DiagnosticsSetting `
            -SubscriptionID "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
            -ResourceGroupName ${{ env.AA_RG_NAME_MAIN }} `
            -TemplateUri ($ConfigConstants.TemplateUriPrefix + "diagnostic-settings.json") `
            -ResourceId $privateLinkScopeNicResourceId `
            -DiagnosticsSettingName ("diag-" + "${{ env.AA_LAW_NAME_MAIN }}") `
            -LogAnalyticsWorkspaceResourceId "${{ env.AA_LAW_RESOURCE_ID_MAIN }}" `
            -SendLogs $false `
            -SendMetrics $true

          Write-Debug -Debug:$true -Message "$output"

          # Private Endpoint DNS Zone Group
          Write-Debug -Debug:$true -Message "Deploy Private Endpoint DNS Zone Group"
          $privateDnsZoneResourceId = Get-ResourceId `
            -SubscriptionId "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
            -ResourceGroupName "${{ env.AA_RG_NAME_MAIN }}" `
            -ResourceProviderName "Microsoft.Network" `
            -ResourceTypeName "privateDnsZones" `
            -ResourceName $ConfigConstants.PrivateDnsZoneNameMonitor

          Deploy-PrivateEndpointPrivateDnsZoneGroup `
            -SubscriptionID "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
            -ResourceGroupName ${{ env.AA_RG_NAME_MAIN }} `
            -TemplateUri ($ConfigConstants.TemplateUriPrefix + "net.private-endpoint.private-dns-zone-group.json") `
            -PrivateEndpointName $privateEndpointName `
            -PrivateDnsZoneName $ConfigConstants.PrivateDnsZoneNameMonitor `
            -PrivateDnsZoneGroupName "default" `
            -PrivateDnsZoneResourceId $privateDnsZoneResourceId


      - name: Deploy Data Collection Endpoint and Rules
        if: success()
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"

          . ./scripts/infra/Utility.ps1
          . ./scripts/infra/Observability.ps1
          . ./scripts/infra/Network.ps1

          $ConfigConstants = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_CONSTANTS }}"
          $ConfigMain = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_MAIN }}"

          $dataCollectionEndpointName = Get-ResourceName -ConfigConstants $ConfigConstants -ConfigMain $ConfigMain -Prefix $ConfigConstants.PrefixDataCollectionEndpoint -Sequence $ConfigConstants.SeqNumDataCollectionEndpoint
          $dataCollectionEndpointResourceId = Get-ResourceId -SubscriptionId "${{ secrets.AZURE_SUBSCRIPTION_ID }}" -ResourceGroupName "${{ env.AA_RG_NAME_MAIN }}" -ResourceProviderName "Microsoft.Insights" -ResourceTypeName "dataCollectionEndpoints" -ResourceName $dataCollectionEndpointName

          $dataCollectionRuleLinuxName = Get-ResourceName -ConfigConstants $ConfigConstants -ConfigMain $ConfigMain -Prefix $ConfigConstants.PrefixDataCollectionRule -Suffix $ConfigConstants.SuffixAmplsDataCollectionRuleLinux
          $dataCollectionRuleLinuxResourceId = Get-ResourceId -SubscriptionId "${{ secrets.AZURE_SUBSCRIPTION_ID }}" -ResourceGroupName "${{ env.AA_RG_NAME_MAIN }}" -ResourceProviderName "Microsoft.Insights" -ResourceTypeName "dataCollectionRules" -ResourceName $dataCollectionRuleLinuxName

          $dataCollectionRuleWindowsName = Get-ResourceName -ConfigConstants $ConfigConstants -ConfigMain $ConfigMain -Prefix $ConfigConstants.PrefixDataCollectionRule -Suffix $ConfigConstants.SuffixAmplsDataCollectionRuleWindows
          $dataCollectionRuleWindowsResourceId = Get-ResourceId -SubscriptionId "${{ secrets.AZURE_SUBSCRIPTION_ID }}" -ResourceGroupName "${{ env.AA_RG_NAME_MAIN }}" -ResourceProviderName "Microsoft.Insights" -ResourceTypeName "dataCollectionRules" -ResourceName $dataCollectionRuleWindowsName

          Write-Debug -Debug:$true -Message "Deploy Data Collection Endpoint"
          $output = Deploy-DataCollectionEndpoint `
            -SubscriptionID "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
            -Location $ConfigMain.Location `
            -ResourceGroupName ${{ env.AA_RG_NAME_MAIN }} `
            -TemplateUri ($ConfigConstants.TemplateUriPrefix + "monitor.data-collection-endpoint.json") `
            -DataCollectionEndpointName "$dataCollectionEndpointName" `
            -PublicNetworkAccess $ConfigMain.Observability.DataCollectionEndpoint.PublicNetworkAccess `
            -Tags ${{ env.AA_TAGS_FOR_ARM }}

          Write-Debug -Debug:$true -Message "$output"

          Write-Debug -Debug:$true -Message "Deploy Data Collection Rule - Linux"
          $output = Deploy-DataCollectionRule `
            -SubscriptionID "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
            -Location $ConfigMain.Location `
            -ResourceGroupName ${{ env.AA_RG_NAME_MAIN }} `
            -TemplateUri ($ConfigConstants.TemplateUriPrefix + "monitor.data-collection-rule.linux.json") `
            -DataCollectionRuleName "$dataCollectionRuleLinuxName" `
            -LogAnalyticsWorkspaceName ${{ env.AA_LAW_NAME_MAIN }} `
            -LogAnalyticsWorkspaceResourceId ${{ env.AA_LAW_RESOURCE_ID_MAIN }} `
            -Tags ${{ env.AA_TAGS_FOR_ARM }}

          Write-Debug -Debug:$true -Message "$output"

          Write-Debug -Debug:$true -Message "Deploy Data Collection Rule - Windows"
          $output = Deploy-DataCollectionRule `
            -SubscriptionID "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
            -Location $ConfigMain.Location `
            -ResourceGroupName ${{ env.AA_RG_NAME_MAIN }} `
            -TemplateUri ($ConfigConstants.TemplateUriPrefix + "monitor.data-collection-rule.windows.json") `
            -DataCollectionRuleName "$dataCollectionRuleWindowsName" `
            -LogAnalyticsWorkspaceName ${{ env.AA_LAW_NAME_MAIN }} `
            -LogAnalyticsWorkspaceResourceId ${{ env.AA_LAW_RESOURCE_ID_MAIN }} `
            -Tags ${{ env.AA_TAGS_FOR_ARM }}

          Write-Debug -Debug:$true -Message "$output"


      - name: Deploy Key Vault
        if: success()
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"

          . ./scripts/infra/Utility.ps1
          . ./scripts/infra/Network.ps1
          . ./scripts/infra/Observability.ps1
          . ./scripts/infra/KeyVault.ps1

          $ConfigConstants = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_CONSTANTS }}"
          $ConfigMain = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_MAIN }}"

          Write-Debug -Debug:$true -Message "Get subnets for Key Vault network access rules"
          $subnetResourceIds = Get-SubnetResourceIds `
            -ConfigConstants $ConfigConstants `
            -ConfigMain $ConfigMain `
            -SubscriptionID "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
            -ResourceGroupName ${{ env.AA_RG_NAME_MAIN }} `
            -VNetName ${{ env.AA_VNET_NAME }}

          $subnetResourceIdsCsv = $($subnetResourceIds -join ",")
          Write-Debug -Debug:$true -Message "$subnetResourceIdsCsv"

          $privateEndpointName = Get-ResourceName -ConfigConstants $ConfigConstants -ConfigMain $ConfigMain -Prefix $ConfigConstants.PrefixPrivateEndpoint -Sequence $ConfigConstants.SeqNumKeyVault
          $keyVaultNicName = Get-ResourceName -ConfigConstants $ConfigConstants -ConfigMain $ConfigMain -Prefix $ConfigConstants.PrefixNic -Sequence $ConfigConstants.SeqNumKeyVault
          $keyVaultNicResourceId = Get-ResourceId -SubscriptionId "${{ secrets.AZURE_SUBSCRIPTION_ID }}" -ResourceGroupName "${{ env.AA_RG_NAME_MAIN }}" -ResourceProviderName "Microsoft.Network" -ResourceTypeName "networkInterfaces" -ResourceName $keyVaultNicName

          Write-Debug -Debug:$true -Message "Deploy Key Vault"
          $output = Deploy-KeyVault `
            -TenantId "${{ secrets.AZURE_TENANT_ID }}" `
            -SubscriptionID "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
            -Location $ConfigMain.Location `
            -ResourceGroupName ${{ env.AA_RG_NAME_MAIN }} `
            -TemplateUri ($ConfigConstants.TemplateUriPrefix + "key-vault.json") `
            -KeyVaultName "${{ env.AA_KEYVAULT_NAME_MAIN }}" `
            -EnabledForDeployment $false `
            -EnabledForDiskEncryption $false `
            -EnabledForTemplateDeployment $false `
            -EnableSoftDelete $false `
            -SoftDeleteRetentionInDays 7 `
            -EnableRbacAuthorization $true `
            -PublicNetworkAccess "Enabled" `
            -DefaultAction "Deny" `
            -AllowedIpAddressRangesCsv "" `
            -AllowedSubnetResourceIdsCsv "$subnetResourceIdsCsv" `
            -Tags ${{ env.AA_TAGS_FOR_ARM }}

          Write-Debug -Debug:$true -Message "$output"

          # Key Vault Diagnostics
          Write-Debug -Debug:$true -Message "Deploy Diagnostics"
          $output = Deploy-DiagnosticsSetting `
            -SubscriptionID "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
            -ResourceGroupName ${{ env.AA_RG_NAME_MAIN }} `
            -TemplateUri ($ConfigConstants.TemplateUriPrefix + "diagnostic-settings.json") `
            -ResourceId "${{ env.AA_KEYVAULT_RESOURCE_ID_MAIN}}" `
            -DiagnosticsSettingName ("diag-" + "${{ env.AA_LAW_NAME_MAIN }}") `
            -LogAnalyticsWorkspaceResourceId "${{ env.AA_LAW_RESOURCE_ID_MAIN }}" `
            -SendLogs $true `
            -SendMetrics $true

          Write-Debug -Debug:$true -Message "$output"

          Write-Debug -Debug:$true -Message "Deploy Private Endpoint and NIC"
          $output = Deploy-PrivateEndpointAndNic `
            -SubscriptionID "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
            -Location $ConfigMain.Location `
            -ResourceGroupName ${{ env.AA_RG_NAME_MAIN }} `
            -TemplateUri ($ConfigConstants.TemplateUriPrefix + "net.private-endpoint.json") `
            -ProtectedWorkloadResourceId "${{ env.AA_KEYVAULT_RESOURCE_ID_MAIN}}" `
            -ProtectedWorkloadSubResource "vault" `
            -PrivateEndpointName $privateEndpointName `
            -NetworkInterfaceName $keyVaultNicName `
            -SubnetResourceId ${{ env.AA_SUBNET_RESOURCE_ID_MAIN }} `
            -Tags ${{ env.AA_TAGS_FOR_ARM }}

          Write-Debug -Debug:$true -Message "$output"

          # NIC Diagnostics
          Write-Debug -Debug:$true -Message "Deploy NIC Diagnostics"
          $output = Deploy-DiagnosticsSetting `
            -SubscriptionID "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
            -ResourceGroupName ${{ env.AA_RG_NAME_MAIN }} `
            -TemplateUri ($ConfigConstants.TemplateUriPrefix + "diagnostic-settings.json") `
            -ResourceId $keyVaultNicResourceId `
            -DiagnosticsSettingName ("diag-" + "${{ env.AA_LAW_NAME_MAIN }}") `
            -LogAnalyticsWorkspaceResourceId "${{ env.AA_LAW_RESOURCE_ID_MAIN }}" `
            -SendLogs $false `
            -SendMetrics $true

          Write-Debug -Debug:$true -Message "$output"

          # Private Endpoint DNS Zone Group
          Write-Debug -Debug:$true -Message "Deploy Private Endpoint DNS Zone Group"
          $privateDnsZoneResourceId = Get-ResourceId `
            -SubscriptionId "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
            -ResourceGroupName "${{ env.AA_RG_NAME_MAIN }}" `
            -ResourceProviderName "Microsoft.Network" `
            -ResourceTypeName "privateDnsZones" `
            -ResourceName $ConfigConstants.PrivateDnsZoneNameKeyVault

          Deploy-PrivateEndpointPrivateDnsZoneGroup `
            -SubscriptionID "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
            -ResourceGroupName ${{ env.AA_RG_NAME_MAIN }} `
            -TemplateUri ($ConfigConstants.TemplateUriPrefix + "net.private-endpoint.private-dns-zone-group.json") `
            -PrivateEndpointName $privateEndpointName `
            -PrivateDnsZoneName $ConfigConstants.PrivateDnsZoneNameKeyVault `
            -PrivateDnsZoneGroupName "default" `
            -PrivateDnsZoneResourceId $privateDnsZoneResourceId


      - name: Deploy Storage
        if: success()
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"

          . ./scripts/infra/Utility.ps1
          . ./scripts/infra/Network.ps1
          . ./scripts/infra/Observability.ps1
          . ./scripts/infra/Storage.ps1

          $ConfigConstants = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_CONSTANTS }}"
          $ConfigMain = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_MAIN }}"

          Write-Debug -Debug:$true -Message "Get subnets for Storage Account network access rules"
          $subnetResourceIds = Get-SubnetResourceIds `
            -ConfigConstants $ConfigConstants `
            -ConfigMain $ConfigMain `
            -SubscriptionID "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
            -ResourceGroupName ${{ env.AA_RG_NAME_MAIN }} `
            -VNetName ${{ env.AA_VNET_NAME }}

          $subnetResourceIdsCsv = $($subnetResourceIds -join ",")
          Write-Debug -Debug:$true -Message "$subnetResourceIdsCsv"

          # Blob
          $privateEndpointNameBlob = Get-ResourceName -ConfigConstants $ConfigConstants -ConfigMain $ConfigMain -Prefix $ConfigConstants.PrefixPrivateEndpoint -Sequence $ConfigConstants.SeqNumStorage -Suffix "blob"
          $storageAccountNicNameBlob = Get-ResourceName -ConfigConstants $ConfigConstants -ConfigMain $ConfigMain -Prefix $ConfigConstants.PrefixNic -Sequence $ConfigConstants.SeqNumStorage -Suffix "blob"
          $storageAccountNicResourceIdBlob = Get-ResourceId -SubscriptionId "${{ secrets.AZURE_SUBSCRIPTION_ID }}" -ResourceGroupName "${{ env.AA_RG_NAME_MAIN }}" -ResourceProviderName "Microsoft.Network" -ResourceTypeName "networkInterfaces" -ResourceName $storageAccountNicNameBlob

          Write-Debug -Debug:$true -Message "Deploy Storage Account"
          $output = Deploy-StorageAccount `
            -SubscriptionID "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
            -Location $ConfigMain.Location `
            -ResourceGroupName ${{ env.AA_RG_NAME_MAIN }} `
            -TemplateUri ($ConfigConstants.TemplateUriPrefix + "storage.account.json") `
            -StorageAccountName "${{ env.AA_STORAGE_ACCOUNT_NAME_MAIN }}" `
            -SkuName $ConfigMain.Storage.SkuName `
            -AllowedSubnetResourceIdsCsv "$subnetResourceIdsCsv" `
            -AllowedIpAddressRangesCsv "" `
            -DefaultAction "Deny" `
            -Tags ${{ env.AA_TAGS_FOR_ARM }}

          Write-Debug -Debug:$true -Message "$output"

          # Storage Account Diagnostics
          Write-Debug -Debug:$true -Message "Deploy Diagnostics"
          $output = Deploy-StorageDiagnosticsSetting `
            -SubscriptionID "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
            -ResourceGroupName ${{ env.AA_RG_NAME_MAIN }} `
            -TemplateUri ($ConfigConstants.TemplateUriPrefix + "storage.diagnostic-settings.json") `
            -ResourceId "${{ env.AA_STORAGE_ACCOUNT_RESOURCE_ID_MAIN }}" `
            -DiagnosticsSettingName ("diag-" + "${{ env.AA_STORAGE_ACCOUNT_NAME_MAIN }}") `
            -LogAnalyticsWorkspaceResourceId "${{ env.AA_LAW_RESOURCE_ID_MAIN }}"

          Write-Debug -Debug:$true -Message "$output"

          # Deploy Storage Private Endpoint and NIC - Blob
          Write-Debug -Debug:$true -Message "Deploy Private Endpoint and NIC"
          $output = Deploy-PrivateEndpointAndNic `
            -SubscriptionID "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
            -Location $ConfigMain.Location `
            -ResourceGroupName ${{ env.AA_RG_NAME_MAIN }} `
            -TemplateUri ($ConfigConstants.TemplateUriPrefix + "net.private-endpoint.json") `
            -ProtectedWorkloadResourceId "${{ env.AA_STORAGE_ACCOUNT_RESOURCE_ID_MAIN }}" `
            -ProtectedWorkloadSubResource "blob" `
            -PrivateEndpointName $privateEndpointNameBlob `
            -NetworkInterfaceName $storageAccountNicNameBlob `
            -SubnetResourceId ${{ env.AA_SUBNET_RESOURCE_ID_MAIN }} `
            -Tags ${{ env.AA_TAGS_FOR_ARM }}

          Write-Debug -Debug:$true -Message "$output"

          # NIC Diagnostics - Blob
          Write-Debug -Debug:$true -Message "Deploy NIC Diagnostics"
          $output = Deploy-DiagnosticsSetting `
            -SubscriptionID "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
            -ResourceGroupName ${{ env.AA_RG_NAME_MAIN }} `
            -TemplateUri ($ConfigConstants.TemplateUriPrefix + "diagnostic-settings.json") `
            -ResourceId $storageAccountNicResourceIdBlob `
            -DiagnosticsSettingName ("diag-" + "${{ env.AA_LAW_NAME_MAIN }}") `
            -LogAnalyticsWorkspaceResourceId "${{ env.AA_LAW_RESOURCE_ID_MAIN }}" `
            -SendLogs $false `
            -SendMetrics $true

          Write-Debug -Debug:$true -Message "$output"

          # Private Endpoint DNS Zone Group
          Write-Debug -Debug:$true -Message "Deploy Private Endpoint DNS Zone Group - Blob"
          $privateDnsZoneResourceId = Get-ResourceId `
            -SubscriptionId "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
            -ResourceGroupName "${{ env.AA_RG_NAME_MAIN }}" `
            -ResourceProviderName "Microsoft.Network" `
            -ResourceTypeName "privateDnsZones" `
            -ResourceName $ConfigConstants.PrivateDnsZoneNameStorageBlob

          Deploy-PrivateEndpointPrivateDnsZoneGroup `
            -SubscriptionID "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
            -ResourceGroupName ${{ env.AA_RG_NAME_MAIN }} `
            -TemplateUri ($ConfigConstants.TemplateUriPrefix + "net.private-endpoint.private-dns-zone-group.json") `
            -PrivateEndpointName $privateEndpointNameBlob `
            -PrivateDnsZoneName $ConfigConstants.PrivateDnsZoneNameStorageBlob `
            -PrivateDnsZoneGroupName "default" `
            -PrivateDnsZoneResourceId $privateDnsZoneResourceId


      - name: Azure logout
        if: always()
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az logout
            az cache purge
            az account clear
...