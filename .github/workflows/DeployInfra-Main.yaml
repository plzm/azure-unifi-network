---
name: Deploy Infrastructure-Main

on: 
  workflow_dispatch:

jobs:
  deploy-infra-main:
    name: Deploy Infrastructure - Main
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set Azure CLI extensions to auto-install
        if: success()
        run: |
          $output = az config set extension.use_dynamic_install=yes_without_prompt | ConvertFrom-Json

          Write-Debug -Debug:$true -Message "$output"
        shell: pwsh

      - name: Azure login
        if: success()
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      - name: Register RPs
        if: success()
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"

          $output = az provider register --namespace "Microsoft.ChangeAnalysis" --accept-terms --consent-to-permissions --wait | ConvertFrom-Json

          Write-Debug -Debug:$true -Message "$output"


      - name: Set Config File Paths to Environment
        if: success()
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"

          . ./scripts/infra/Utility.ps1

          Set-EnvVar2 -VarName "AA_CONFIG_FILE_INFRA_CONSTANTS" -VarValue "./config/infra_constants.json"
          Set-EnvVar2 -VarName "AA_CONFIG_FILE_INFRA_MAIN" -VarValue ("./config/infra_main.json")


      - name: Set Variables and write to Environment
        if: success()
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"

          . ./scripts/infra/Utility.ps1

          $configConstants = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_CONSTANTS }}"
          $configMain = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_MAIN }}"

          # Tags
          Set-EnvVarTags -ConfigConstants $configConstants -ConfigMain $configMain
          # Resource Groups
          $rgNameMain = Get-ResourceName -ConfigConstants $configConstants -ConfigMain $configMain -Suffix $configMain.Suffix

          Set-EnvVar2 -VarName "AA_RG_NAME_MAIN" -VarValue "$rgNameMain"

          # User Assigned Identity
          $uaiName = Get-ResourceName -ConfigConstants $configConstants -ConfigMain $configMain -Prefix $configConstants.PrefixUai -Sequence $configConstants.SeqNumUai
          $uaiResourceId = Get-ResourceId -SubscriptionId "${{ secrets.AZURE_SUBSCRIPTION_ID }}" -ResourceGroupName "$rgNameMain" -ResourceProviderName "Microsoft.ManagedIdentity" -ResourceTypeName "userAssignedIdentities" -ResourceName $uaiName

          Set-EnvVar2 -VarName "AA_UAI_NAME" -VarValue "$uaiName"
          Set-EnvVar2 -VarName "AA_UAI_RESOURCE_ID" -VarValue "$uaiResourceId"
          # In step below (after UAI provisioned)
          # AA_UAI_CLIENT_ID, AA_UAI_PRINCIPAL_ID

          # Log Analytics
          $workspaceName = Get-ResourceName -ConfigConstants $configConstants -ConfigMain $configMain -Prefix $configConstants.PrefixLogAnalytics -Sequence $configConstants.SeqNumLogAnalytics
          $workspaceResourceId = Get-ResourceId -SubscriptionId "${{ secrets.AZURE_SUBSCRIPTION_ID }}" -ResourceGroupName "$rgNameMain" -ResourceProviderName "microsoft.operationalinsights" -ResourceTypeName "workspaces" -ResourceName $workspaceName

          Set-EnvVar2 -VarName "AA_LAW_NAME" -VarValue "$workspaceName"
          Set-EnvVar2 -VarName "AA_LAW_RESOURCE_ID" -VarValue "$workspaceResourceId"

          # Env vars listed here for convenience
          # AA_TAGS_FOR_CLI
          # AA_TAGS_FOR_ARM
          # AA_RG_NAME_MAIN
          # AA_UAI_NAME
          # AA_UAI_RESOURCE_ID
          # AA_UAI_CLIENT_ID - set below
          # AA_UAI_PRINCIPAL_ID - set below
          # AA_LAW_NAME
          # AA_LAW_RESOURCE_ID


      - name: Create Resource Groups
        if: success()
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"

          . ./scripts/infra/Utility.ps1

          $configConstants = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_CONSTANTS }}"
          $configMain = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_MAIN }}"

          Write-Debug -Debug:$true -Message "Create RG ${{ env.AA_RG_NAME_MAIN }}"
          $output = az group create `
            --subscription "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
            -l $configMain.Location `
            -n "${{ env.AA_RG_NAME_MAIN }}" `
            --tags ${{ env.AA_TAGS_FOR_CLI }} `
            | ConvertFrom-Json


      - name: Deploy User Assigned Identity
        if: success()
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"

          . ./scripts/infra/Utility.ps1
          . ./scripts/infra/Security.ps1

          $configConstants = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_CONSTANTS }}"
          $configMain = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_MAIN }}"

          Write-Debug -Debug:$true -Message "Deploy UAI ${{ env.AA_UAI_NAME }}"
          $output = Deploy-UAI `
            -SubscriptionID "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
            -Location $configMain.Location `
            -ResourceGroupName ${{ env.AA_RG_NAME_MAIN }} `
            -TemplateUri ($configConstants.TemplateUriPrefix + "identity.user-assigned-identity.json") `
            -TenantId "${{ secrets.AZURE_TENANT_ID }}" `
            -UAIName "${{ env.AA_UAI_NAME }}" `
            -Tags ${{ env.AA_TAGS_FOR_ARM }}

          Write-Debug -Debug:$true -Message "$output"

          Write-Debug -Debug:$true -Message "Sleep to allow UAI deploy to complete"
          Start-Sleep -s 60

          Write-Debug -Debug:$true -Message "Get UAI ${{ env.AA_UAI_NAME }}"
          $uai = "$(az identity show -g ${{ env.AA_RG_NAME_MAIN }} -n ${{ env.AA_UAI_NAME }})" | ConvertFrom-Json

          Set-EnvVar2 -VarName "AA_UAI_CLIENT_ID" -VarValue $uai.clientId
          Set-EnvVar2 -VarName "AA_UAI_PRINCIPAL_ID" -VarValue $uai.principalId


      - name: Deploy Role Assignments
        if: success()
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"

          . ./scripts/infra/Utility.ps1
          . ./scripts/infra/Security.ps1

          $configConstants = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_CONSTANTS }}"
          $configMain = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_MAIN }}"

          Write-Debug -Debug:$true -Message "Deploy Role Assignment | UAI | KV Certificates Officer"
          $output = Deploy-RoleAssignmentSub `
            -Location $configMain.Location `
            -TemplateUri ($configConstants.TemplateUriPrefix + "authorization.role-assignment.sub.json") `
            -RoleDefinitionId $configConstants.RoleDefinitionIdKeyVaultCertificatesOfficer `
            -PrincipalId "${{ env.AA_UAI_PRINCIPAL_ID }}"

          Write-Debug -Debug:$true -Message "$output"

          Write-Debug -Debug:$true -Message "Deploy Role Assignment | UAI | KV Crypto Officer"
          $output = Deploy-RoleAssignmentSub `
            -Location $configMain.Location `
            -TemplateUri ($configConstants.TemplateUriPrefix + "authorization.role-assignment.sub.json") `
            -RoleDefinitionId $configConstants.RoleDefinitionIdKeyVaultCryptoOfficer `
            -PrincipalId "${{ env.AA_UAI_PRINCIPAL_ID }}"

          Write-Debug -Debug:$true -Message "$output"

          Write-Debug -Debug:$true -Message "Deploy Role Assignment | UAI | KV Secrets Officer"
          $output = Deploy-RoleAssignmentSub `
            -Location $configMain.Location `
            -TemplateUri ($configConstants.TemplateUriPrefix + "authorization.role-assignment.sub.json") `
            -RoleDefinitionId $configConstants.RoleDefinitionIdKeyVaultSecretsOfficer `
            -PrincipalId "${{ env.AA_UAI_PRINCIPAL_ID }}"

          Write-Debug -Debug:$true -Message "$output"

          Write-Debug -Debug:$true -Message "Deploy Role Assignment | UAI | Monitoring Metrics Publisher"
          $output = Deploy-RoleAssignmentSub `
            -Location $configMain.Location `
            -TemplateUri ($configConstants.TemplateUriPrefix + "authorization.role-assignment.sub.json") `
            -RoleDefinitionId $configConstants.RoleDefinitionIdMonitoringMetricsPublisher `
            -PrincipalId "${{ env.AA_UAI_PRINCIPAL_ID }}"

          Write-Debug -Debug:$true -Message "$output"

          Write-Debug -Debug:$true -Message "Deploy Role Assignment | UAI | Storage Blob Data Contributor"
          $output = Deploy-RoleAssignmentSub `
            -Location $configMain.Location `
            -TemplateUri ($configConstants.TemplateUriPrefix + "authorization.role-assignment.sub.json") `
            -RoleDefinitionId $configConstants.RoleDefinitionIdStorageBlobDataContributor `
            -PrincipalId "${{ env.AA_UAI_PRINCIPAL_ID }}"

          Write-Debug -Debug:$true -Message "$output"

          Write-Debug -Debug:$true -Message "Deploy Role Assignment | UAI | Storage Blob Queue Contributor"
          $output = Deploy-RoleAssignmentSub `
            -Location $configMain.Location `
            -TemplateUri ($configConstants.TemplateUriPrefix + "authorization.role-assignment.sub.json") `
            -RoleDefinitionId $configConstants.RoleDefinitionIdStorageQueueDataContributor `
            -PrincipalId "${{ env.AA_UAI_PRINCIPAL_ID }}"

          Write-Debug -Debug:$true -Message "$output"

          Write-Debug -Debug:$true -Message "Deploy Role Assignment | App Services RP App Reg | Key Vault Secrets User"
          $output = Deploy-RoleAssignmentSub `
            -Location $configMain.Location `
            -TemplateUri ($configConstants.TemplateUriPrefix + "authorization.role-assignment.sub.json") `
            -RoleDefinitionId $configConstants.RoleDefinitionIdKeyVaultSecretsUser `
            -PrincipalId $configConstants.PrincipalIdAppServicesRp

          Write-Debug -Debug:$true -Message "$output"

          Write-Debug -Debug:$true -Message "Deploy Role Assignment | Diagnostic Services Trusted Storage Access | Storage Blob Data Contributor"
          $output = Deploy-RoleAssignmentSub `
            -Location $configMain.Location `
            -TemplateUri ($configConstants.TemplateUriPrefix + "authorization.role-assignment.sub.json") `
            -RoleDefinitionId $configConstants.RoleDefinitionIdKeyVaultSecretsUser `
            -PrincipalId $configConstants.PrincipalIdDiagnosticServicesTrustedStorageAccess

          Write-Debug -Debug:$true -Message "$output"


      - name: Deploy Observability
        if: success()
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"

          . ./scripts/infra/Utility.ps1
          . ./scripts/infra/Observability.ps1

          $configConstants = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_CONSTANTS }}"
          $configMain = Get-ConfigFromFile -ConfigFilePath "${{ env.AA_CONFIG_FILE_INFRA_MAIN }}"

          Write-Debug -Debug:$true -Message "Deploy LAW ${{ env.AA_LAW_NAME }}"
          $output = Deploy-LogAnalyticsWorkspace `
            -SubscriptionID "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
            -Location $configGlobal.Location `
            -ResourceGroupName ${{ env.AA_RG_NAME_MAIN }} `
            -TemplateUri ($configConstants.TemplateUriPrefix + "monitor.log-analytics-workspace.json") `
            -WorkspaceName "${{ env.AA_LAW_NAME }}" `
            -Tags ${{ env.AA_TAGS_FOR_ARM }}

          Write-Debug -Debug:$true -Message "$output"

          Write-Debug -Debug:$true -Message "Deploy Diagnostics"
          $output = Deploy-DiagnosticsSetting `
            -SubscriptionID "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
            -ResourceGroupName ${{ env.AA_RG_NAME_MAIN }} `
            -TemplateUri ($configConstants.TemplateUriPrefix + "diagnostic-settings.json") `
            -ResourceId "${{ env.AA_LAW_RESOURCE_ID }}" `
            -DiagnosticsSettingName ("diag-" + "${{ env.AA_LAW_NAME }}") `
            -LogAnalyticsWorkspaceResourceId "${{ env.AA_LAW_RESOURCE_ID }}" `
            -SendLogs $true `
            -SendMetrics $true

          Write-Debug -Debug:$true -Message "$output"



...